/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourcesShowResourceDetailsResponsePermissionsInner;
import com.konfigthis.client.model.ResourcesShowResourceDetailsResponsePolicyVersionsInner;
import com.konfigthis.client.model.ResourcesShowResourceDetailsResponseSecretsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ResourcesShowResourceDetailsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ResourcesShowResourceDetailsResponse {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<ResourcesShowResourceDetailsResponsePermissionsInner> permissions = null;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<String> annotations = null;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<ResourcesShowResourceDetailsResponseSecretsInner> secrets = null;

  public static final String SERIALIZED_NAME_RESTRICTED_TO = "restricted_to";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_TO)
  private List<String> restrictedTo = null;

  public static final String SERIALIZED_NAME_POLICY_VERSIONS = "policy_versions";
  @SerializedName(SERIALIZED_NAME_POLICY_VERSIONS)
  private List<ResourcesShowResourceDetailsResponsePolicyVersionsInner> policyVersions = null;

  public ResourcesShowResourceDetailsResponse() {
  }

  public ResourcesShowResourceDetailsResponse createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-23T16:37:14.455+00:00", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ResourcesShowResourceDetailsResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dev:policy:conjur/authn-ldap/testX", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ResourcesShowResourceDetailsResponse owner(String owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dev:user:admin", value = "")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    
    
    
    this.owner = owner;
  }


  public ResourcesShowResourceDetailsResponse permissions(List<ResourcesShowResourceDetailsResponsePermissionsInner> permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

  public ResourcesShowResourceDetailsResponse addPermissionsItem(ResourcesShowResourceDetailsResponsePermissionsInner permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ResourcesShowResourceDetailsResponsePermissionsInner> getPermissions() {
    return permissions;
  }


  public void setPermissions(List<ResourcesShowResourceDetailsResponsePermissionsInner> permissions) {
    
    
    
    this.permissions = permissions;
  }


  public ResourcesShowResourceDetailsResponse policy(String policy) {
    
    
    
    
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dev:policy:root", value = "")

  public String getPolicy() {
    return policy;
  }


  public void setPolicy(String policy) {
    
    
    
    this.policy = policy;
  }


  public ResourcesShowResourceDetailsResponse annotations(List<String> annotations) {
    
    
    
    
    this.annotations = annotations;
    return this;
  }

  public ResourcesShowResourceDetailsResponse addAnnotationsItem(String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(List<String> annotations) {
    
    
    
    this.annotations = annotations;
  }


  public ResourcesShowResourceDetailsResponse secrets(List<ResourcesShowResourceDetailsResponseSecretsInner> secrets) {
    
    
    
    
    this.secrets = secrets;
    return this;
  }

  public ResourcesShowResourceDetailsResponse addSecretsItem(ResourcesShowResourceDetailsResponseSecretsInner secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ResourcesShowResourceDetailsResponseSecretsInner> getSecrets() {
    return secrets;
  }


  public void setSecrets(List<ResourcesShowResourceDetailsResponseSecretsInner> secrets) {
    
    
    
    this.secrets = secrets;
  }


  public ResourcesShowResourceDetailsResponse restrictedTo(List<String> restrictedTo) {
    
    
    
    
    this.restrictedTo = restrictedTo;
    return this;
  }

  public ResourcesShowResourceDetailsResponse addRestrictedToItem(String restrictedToItem) {
    if (this.restrictedTo == null) {
      this.restrictedTo = new ArrayList<>();
    }
    this.restrictedTo.add(restrictedToItem);
    return this;
  }

   /**
   * Get restrictedTo
   * @return restrictedTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRestrictedTo() {
    return restrictedTo;
  }


  public void setRestrictedTo(List<String> restrictedTo) {
    
    
    
    this.restrictedTo = restrictedTo;
  }


  public ResourcesShowResourceDetailsResponse policyVersions(List<ResourcesShowResourceDetailsResponsePolicyVersionsInner> policyVersions) {
    
    
    
    
    this.policyVersions = policyVersions;
    return this;
  }

  public ResourcesShowResourceDetailsResponse addPolicyVersionsItem(ResourcesShowResourceDetailsResponsePolicyVersionsInner policyVersionsItem) {
    if (this.policyVersions == null) {
      this.policyVersions = new ArrayList<>();
    }
    this.policyVersions.add(policyVersionsItem);
    return this;
  }

   /**
   * Get policyVersions
   * @return policyVersions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ResourcesShowResourceDetailsResponsePolicyVersionsInner> getPolicyVersions() {
    return policyVersions;
  }


  public void setPolicyVersions(List<ResourcesShowResourceDetailsResponsePolicyVersionsInner> policyVersions) {
    
    
    
    this.policyVersions = policyVersions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ResourcesShowResourceDetailsResponse instance itself
   */
  public ResourcesShowResourceDetailsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourcesShowResourceDetailsResponse resourcesShowResourceDetailsResponse = (ResourcesShowResourceDetailsResponse) o;
    return Objects.equals(this.createdAt, resourcesShowResourceDetailsResponse.createdAt) &&
        Objects.equals(this.id, resourcesShowResourceDetailsResponse.id) &&
        Objects.equals(this.owner, resourcesShowResourceDetailsResponse.owner) &&
        Objects.equals(this.permissions, resourcesShowResourceDetailsResponse.permissions) &&
        Objects.equals(this.policy, resourcesShowResourceDetailsResponse.policy) &&
        Objects.equals(this.annotations, resourcesShowResourceDetailsResponse.annotations) &&
        Objects.equals(this.secrets, resourcesShowResourceDetailsResponse.secrets) &&
        Objects.equals(this.restrictedTo, resourcesShowResourceDetailsResponse.restrictedTo) &&
        Objects.equals(this.policyVersions, resourcesShowResourceDetailsResponse.policyVersions)&&
        Objects.equals(this.additionalProperties, resourcesShowResourceDetailsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, id, owner, permissions, policy, annotations, secrets, restrictedTo, policyVersions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourcesShowResourceDetailsResponse {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    restrictedTo: ").append(toIndentedString(restrictedTo)).append("\n");
    sb.append("    policyVersions: ").append(toIndentedString(policyVersions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("policy");
    openapiFields.add("annotations");
    openapiFields.add("secrets");
    openapiFields.add("restricted_to");
    openapiFields.add("policy_versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ResourcesShowResourceDetailsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ResourcesShowResourceDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourcesShowResourceDetailsResponse is not found in the empty JSON string", ResourcesShowResourceDetailsResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            ResourcesShowResourceDetailsResponsePermissionsInner.validateJsonObject(jsonArraypermissions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
      }
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) {
        JsonArray jsonArraysecrets = jsonObj.getAsJsonArray("secrets");
        if (jsonArraysecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
          }

          // validate the optional field `secrets` (array)
          for (int i = 0; i < jsonArraysecrets.size(); i++) {
            ResourcesShowResourceDetailsResponseSecretsInner.validateJsonObject(jsonArraysecrets.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restricted_to") != null && !jsonObj.get("restricted_to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restricted_to` to be an array in the JSON string but got `%s`", jsonObj.get("restricted_to").toString()));
      }
      if (jsonObj.get("policy_versions") != null && !jsonObj.get("policy_versions").isJsonNull()) {
        JsonArray jsonArraypolicyVersions = jsonObj.getAsJsonArray("policy_versions");
        if (jsonArraypolicyVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policy_versions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policy_versions` to be an array in the JSON string but got `%s`", jsonObj.get("policy_versions").toString()));
          }

          // validate the optional field `policy_versions` (array)
          for (int i = 0; i < jsonArraypolicyVersions.size(); i++) {
            ResourcesShowResourceDetailsResponsePolicyVersionsInner.validateJsonObject(jsonArraypolicyVersions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourcesShowResourceDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourcesShowResourceDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourcesShowResourceDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourcesShowResourceDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourcesShowResourceDetailsResponse>() {
           @Override
           public void write(JsonWriter out, ResourcesShowResourceDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourcesShowResourceDetailsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ResourcesShowResourceDetailsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResourcesShowResourceDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResourcesShowResourceDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to ResourcesShowResourceDetailsResponse
  */
  public static ResourcesShowResourceDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourcesShowResourceDetailsResponse.class);
  }

 /**
  * Convert an instance of ResourcesShowResourceDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

