/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the client making a request
 */
@ApiModel(description = "Information about the client making a request")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StatusGetClientInfoResponse {
  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_TOKEN_ISSUED_AT = "token_issued_at";
  @SerializedName(SERIALIZED_NAME_TOKEN_ISSUED_AT)
  private String tokenIssuedAt;

  public StatusGetClientInfoResponse() {
  }

  public StatusGetClientInfoResponse clientIp(String clientIp) {
    
    
    
    
    this.clientIp = clientIp;
    return this;
  }

   /**
   * The request client IP address as determined by Conjur. This same IP address appears in application logs and audit logs.
   * @return clientIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "127.0.0.1", value = "The request client IP address as determined by Conjur. This same IP address appears in application logs and audit logs.")

  public String getClientIp() {
    return clientIp;
  }


  public void setClientIp(String clientIp) {
    
    
    
    this.clientIp = clientIp;
  }


  public StatusGetClientInfoResponse userAgent(String userAgent) {
    
    
    
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * The incoming request HTTP user agent header.
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", value = "The incoming request HTTP user agent header.")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    
    
    
    this.userAgent = userAgent;
  }


  public StatusGetClientInfoResponse account(String account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * The account attribute of the client provided access token.
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dev", value = "The account attribute of the client provided access token.")

  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    
    
    
    this.account = account;
  }


  public StatusGetClientInfoResponse username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * The username attribute of the provided access token.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "admin", value = "The username attribute of the provided access token.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public StatusGetClientInfoResponse tokenIssuedAt(String tokenIssuedAt) {
    
    
    
    
    this.tokenIssuedAt = tokenIssuedAt;
    return this;
  }

   /**
   * The issued timestamp, that is, when the provided access token was created (iat field in the JWT)
   * @return tokenIssuedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-08-04T22:27:20+00:00", value = "The issued timestamp, that is, when the provided access token was created (iat field in the JWT)")

  public String getTokenIssuedAt() {
    return tokenIssuedAt;
  }


  public void setTokenIssuedAt(String tokenIssuedAt) {
    
    
    
    this.tokenIssuedAt = tokenIssuedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StatusGetClientInfoResponse instance itself
   */
  public StatusGetClientInfoResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusGetClientInfoResponse statusGetClientInfoResponse = (StatusGetClientInfoResponse) o;
    return Objects.equals(this.clientIp, statusGetClientInfoResponse.clientIp) &&
        Objects.equals(this.userAgent, statusGetClientInfoResponse.userAgent) &&
        Objects.equals(this.account, statusGetClientInfoResponse.account) &&
        Objects.equals(this.username, statusGetClientInfoResponse.username) &&
        Objects.equals(this.tokenIssuedAt, statusGetClientInfoResponse.tokenIssuedAt)&&
        Objects.equals(this.additionalProperties, statusGetClientInfoResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientIp, userAgent, account, username, tokenIssuedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusGetClientInfoResponse {\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    tokenIssuedAt: ").append(toIndentedString(tokenIssuedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_ip");
    openapiFields.add("user_agent");
    openapiFields.add("account");
    openapiFields.add("username");
    openapiFields.add("token_issued_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatusGetClientInfoResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatusGetClientInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusGetClientInfoResponse is not found in the empty JSON string", StatusGetClientInfoResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("token_issued_at") != null && !jsonObj.get("token_issued_at").isJsonNull()) && !jsonObj.get("token_issued_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_issued_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_issued_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusGetClientInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusGetClientInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusGetClientInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusGetClientInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusGetClientInfoResponse>() {
           @Override
           public void write(JsonWriter out, StatusGetClientInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusGetClientInfoResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StatusGetClientInfoResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatusGetClientInfoResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatusGetClientInfoResponse
  * @throws IOException if the JSON string is invalid with respect to StatusGetClientInfoResponse
  */
  public static StatusGetClientInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusGetClientInfoResponse.class);
  }

 /**
  * Convert an instance of StatusGetClientInfoResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

