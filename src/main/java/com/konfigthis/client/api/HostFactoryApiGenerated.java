/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HostFactoryCreateHostIdentityTokensRequest;
import com.konfigthis.client.model.HostFactoryCreateHostIdentityTokensResponseInner;
import com.konfigthis.client.model.HostFactoryCreateHostRequest;
import com.konfigthis.client.model.HostFactoryCreateHostResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HostFactoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HostFactoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HostFactoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createHostCall(String id, HostFactoryCreateHostRequest hostFactoryCreateHostRequest, String xRequestId, Object annotations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostFactoryCreateHostRequest;

        // create path and map variables
        String localVarPath = "/host_factories/hosts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (annotations != null) {
            localVarFormParams.put("annotations", annotations);
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHostValidateBeforeCall(String id, HostFactoryCreateHostRequest hostFactoryCreateHostRequest, String xRequestId, Object annotations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createHost(Async)");
        }

        // verify the required parameter 'hostFactoryCreateHostRequest' is set
        if (hostFactoryCreateHostRequest == null) {
            throw new ApiException("Missing the required parameter 'hostFactoryCreateHostRequest' when calling createHost(Async)");
        }

        return createHostCall(id, hostFactoryCreateHostRequest, xRequestId, annotations, _callback);

    }


    private ApiResponse<HostFactoryCreateHostResponse> createHostWithHttpInfo(String id, HostFactoryCreateHostRequest hostFactoryCreateHostRequest, String xRequestId, Object annotations) throws ApiException {
        okhttp3.Call localVarCall = createHostValidateBeforeCall(id, hostFactoryCreateHostRequest, xRequestId, annotations, null);
        Type localVarReturnType = new TypeToken<HostFactoryCreateHostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createHostAsync(String id, HostFactoryCreateHostRequest hostFactoryCreateHostRequest, String xRequestId, Object annotations, final ApiCallback<HostFactoryCreateHostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHostValidateBeforeCall(id, hostFactoryCreateHostRequest, xRequestId, annotations, _callback);
        Type localVarReturnType = new TypeToken<HostFactoryCreateHostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateHostRequestBuilder {
        private final String id;
        private String xRequestId;
        private Object annotations;

        private CreateHostRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return CreateHostRequestBuilder
         */
        public CreateHostRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set annotations
         * @param annotations Annotations to apply to the new host (optional)
         * @return CreateHostRequestBuilder
         */
        public CreateHostRequestBuilder annotations(Object annotations) {
            this.annotations = annotations;
            return this;
        }
        
        /**
         * Build call for createHost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body contains the newly-created host </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HostFactoryCreateHostRequest hostFactoryCreateHostRequest = buildBodyParams();
            return createHostCall(id, hostFactoryCreateHostRequest, xRequestId, annotations, _callback);
        }

        private HostFactoryCreateHostRequest buildBodyParams() {
            HostFactoryCreateHostRequest hostFactoryCreateHostRequest = new HostFactoryCreateHostRequest();
            hostFactoryCreateHostRequest.id(this.id);
            hostFactoryCreateHostRequest.annotations(this.annotations);
            return hostFactoryCreateHostRequest;
        }

        /**
         * Execute createHost request
         * @return HostFactoryCreateHostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body contains the newly-created host </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public HostFactoryCreateHostResponse execute() throws ApiException {
            HostFactoryCreateHostRequest hostFactoryCreateHostRequest = buildBodyParams();
            ApiResponse<HostFactoryCreateHostResponse> localVarResp = createHostWithHttpInfo(id, hostFactoryCreateHostRequest, xRequestId, annotations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createHost request with HTTP info returned
         * @return ApiResponse&lt;HostFactoryCreateHostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body contains the newly-created host </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HostFactoryCreateHostResponse> executeWithHttpInfo() throws ApiException {
            HostFactoryCreateHostRequest hostFactoryCreateHostRequest = buildBodyParams();
            return createHostWithHttpInfo(id, hostFactoryCreateHostRequest, xRequestId, annotations);
        }

        /**
         * Execute createHost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body contains the newly-created host </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HostFactoryCreateHostResponse> _callback) throws ApiException {
            HostFactoryCreateHostRequest hostFactoryCreateHostRequest = buildBodyParams();
            return createHostAsync(id, hostFactoryCreateHostRequest, xRequestId, annotations, _callback);
        }
    }

    /**
     * Creates a Host using the Host Factory.
     * Creates a Host using the Host Factory and returns a JSON description of it.  Requires a host factory token, which can be created using the create tokens API. In practice, this token is usually provided automatically as part of Conjur integration with your host provisioning infrastructure.  Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address. 
     * @param id Identifier of the host to be created. It will be created within the account of the host factory. (required)
     * @param hostFactoryCreateHostRequest Parameters (required)
     * @return CreateHostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body contains the newly-created host </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public CreateHostRequestBuilder createHost(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateHostRequestBuilder(id);
    }
    private okhttp3.Call createHostIdentityTokensCall(String expiration, String hostFactory, HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest, String xRequestId, Integer count, List<String> cidr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostFactoryCreateHostIdentityTokensRequest;

        // create path and map variables
        String localVarPath = "/host_factory_tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expiration != null) {
            localVarFormParams.put("expiration", expiration);
        }

        if (hostFactory != null) {
            localVarFormParams.put("host_factory", hostFactory);
        }

        if (count != null) {
            localVarFormParams.put("count", count);
        }

        if (cidr != null) {
            localVarFormParams.put("cidr", cidr);
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHostIdentityTokensValidateBeforeCall(String expiration, String hostFactory, HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest, String xRequestId, Integer count, List<String> cidr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expiration' is set
        if (expiration == null) {
            throw new ApiException("Missing the required parameter 'expiration' when calling createHostIdentityTokens(Async)");
        }

        // verify the required parameter 'hostFactory' is set
        if (hostFactory == null) {
            throw new ApiException("Missing the required parameter 'hostFactory' when calling createHostIdentityTokens(Async)");
        }

        // verify the required parameter 'hostFactoryCreateHostIdentityTokensRequest' is set
        if (hostFactoryCreateHostIdentityTokensRequest == null) {
            throw new ApiException("Missing the required parameter 'hostFactoryCreateHostIdentityTokensRequest' when calling createHostIdentityTokens(Async)");
        }

        return createHostIdentityTokensCall(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr, _callback);

    }


    private ApiResponse<List<HostFactoryCreateHostIdentityTokensResponseInner>> createHostIdentityTokensWithHttpInfo(String expiration, String hostFactory, HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest, String xRequestId, Integer count, List<String> cidr) throws ApiException {
        okhttp3.Call localVarCall = createHostIdentityTokensValidateBeforeCall(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr, null);
        Type localVarReturnType = new TypeToken<List<HostFactoryCreateHostIdentityTokensResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createHostIdentityTokensAsync(String expiration, String hostFactory, HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest, String xRequestId, Integer count, List<String> cidr, final ApiCallback<List<HostFactoryCreateHostIdentityTokensResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHostIdentityTokensValidateBeforeCall(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr, _callback);
        Type localVarReturnType = new TypeToken<List<HostFactoryCreateHostIdentityTokensResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateHostIdentityTokensRequestBuilder {
        private final String expiration;
        private final String hostFactory;
        private String xRequestId;
        private Integer count;
        private List<String> cidr;

        private CreateHostIdentityTokensRequestBuilder(String expiration, String hostFactory) {
            this.expiration = expiration;
            this.hostFactory = hostFactory;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return CreateHostIdentityTokensRequestBuilder
         */
        public CreateHostIdentityTokensRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set count
         * @param count Number of host tokens to create (optional)
         * @return CreateHostIdentityTokensRequestBuilder
         */
        public CreateHostIdentityTokensRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set cidr
         * @param cidr Number of host tokens to create (optional)
         * @return CreateHostIdentityTokensRequestBuilder
         */
        public CreateHostIdentityTokensRequestBuilder cidr(List<String> cidr) {
            this.cidr = cidr;
            return this;
        }
        
        /**
         * Build call for createHostIdentityTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Zero or more tokens were created and delivered in the response body </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest = buildBodyParams();
            return createHostIdentityTokensCall(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr, _callback);
        }

        private HostFactoryCreateHostIdentityTokensRequest buildBodyParams() {
            HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest = new HostFactoryCreateHostIdentityTokensRequest();
            hostFactoryCreateHostIdentityTokensRequest.expiration(this.expiration);
            hostFactoryCreateHostIdentityTokensRequest.hostFactory(this.hostFactory);
            hostFactoryCreateHostIdentityTokensRequest.count(this.count);
            hostFactoryCreateHostIdentityTokensRequest.cidr(this.cidr);
            return hostFactoryCreateHostIdentityTokensRequest;
        }

        /**
         * Execute createHostIdentityTokens request
         * @return List&lt;HostFactoryCreateHostIdentityTokensResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Zero or more tokens were created and delivered in the response body </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public List<HostFactoryCreateHostIdentityTokensResponseInner> execute() throws ApiException {
            HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest = buildBodyParams();
            ApiResponse<List<HostFactoryCreateHostIdentityTokensResponseInner>> localVarResp = createHostIdentityTokensWithHttpInfo(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createHostIdentityTokens request with HTTP info returned
         * @return ApiResponse&lt;List&lt;HostFactoryCreateHostIdentityTokensResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Zero or more tokens were created and delivered in the response body </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<HostFactoryCreateHostIdentityTokensResponseInner>> executeWithHttpInfo() throws ApiException {
            HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest = buildBodyParams();
            return createHostIdentityTokensWithHttpInfo(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr);
        }

        /**
         * Execute createHostIdentityTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Zero or more tokens were created and delivered in the response body </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<HostFactoryCreateHostIdentityTokensResponseInner>> _callback) throws ApiException {
            HostFactoryCreateHostIdentityTokensRequest hostFactoryCreateHostIdentityTokensRequest = buildBodyParams();
            return createHostIdentityTokensAsync(expiration, hostFactory, hostFactoryCreateHostIdentityTokensRequest, xRequestId, count, cidr, _callback);
        }
    }

    /**
     * Creates one or more host identity tokens.
     * Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.  If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.  ##### Permissions required # &#x60;execute&#x60; privilege on the Host Factory.\&quot; 
     * @param expiration &#x60;ISO 8601 datetime&#x60; denoting a requested expiration time. (required)
     * @param hostFactory Fully qualified host factory ID (required)
     * @param hostFactoryCreateHostIdentityTokensRequest Parameters (required)
     * @return CreateHostIdentityTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zero or more tokens were created and delivered in the response body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public CreateHostIdentityTokensRequestBuilder createHostIdentityTokens(String expiration, String hostFactory) throws IllegalArgumentException {
        if (expiration == null) throw new IllegalArgumentException("\"expiration\" is required but got null");
            

        if (hostFactory == null) throw new IllegalArgumentException("\"hostFactory\" is required but got null");
            

        return new CreateHostIdentityTokensRequestBuilder(expiration, hostFactory);
    }
    private okhttp3.Call revokeTokenCall(String token, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/host_factory_tokens/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String token, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling revokeToken(Async)");
        }

        return revokeTokenCall(token, xRequestId, _callback);

    }


    private ApiResponse<Void> revokeTokenWithHttpInfo(String token, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(token, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeTokenAsync(String token, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(token, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeTokenRequestBuilder {
        private final String token;
        private String xRequestId;

        private RevokeTokenRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return RevokeTokenRequestBuilder
         */
        public RevokeTokenRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for revokeToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Token was successfully revoked </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeTokenCall(token, xRequestId, _callback);
        }


        /**
         * Execute revokeToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Token was successfully revoked </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeTokenWithHttpInfo(token, xRequestId);
        }

        /**
         * Execute revokeToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Token was successfully revoked </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeTokenWithHttpInfo(token, xRequestId);
        }

        /**
         * Execute revokeToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Token was successfully revoked </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeTokenAsync(token, xRequestId, _callback);
        }
    }

    /**
     * Revokes a token, immediately disabling it.
     * Revokes a token, immediately disabling it.  ##### Permissions required  &#x60;update&#x60; privilege on the host factory.\&quot; 
     * @param token The host factory token to revoke (required)
     * @return RevokeTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Token was successfully revoked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
     </table>
     */
    public RevokeTokenRequestBuilder revokeToken(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RevokeTokenRequestBuilder(token);
    }
}
