/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.StatusAuthenticatorDetailsResponse;
import com.konfigthis.client.model.StatusConjurServerInfoResponse;
import com.konfigthis.client.model.StatusGetClientInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatusApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatusApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authenticatorDetailsCall(String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authenticators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticatorDetailsValidateBeforeCall(String xRequestId, final ApiCallback _callback) throws ApiException {
        return authenticatorDetailsCall(xRequestId, _callback);

    }


    private ApiResponse<StatusAuthenticatorDetailsResponse> authenticatorDetailsWithHttpInfo(String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = authenticatorDetailsValidateBeforeCall(xRequestId, null);
        Type localVarReturnType = new TypeToken<StatusAuthenticatorDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authenticatorDetailsAsync(String xRequestId, final ApiCallback<StatusAuthenticatorDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticatorDetailsValidateBeforeCall(xRequestId, _callback);
        Type localVarReturnType = new TypeToken<StatusAuthenticatorDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthenticatorDetailsRequestBuilder {
        private String xRequestId;

        private AuthenticatorDetailsRequestBuilder() {
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return AuthenticatorDetailsRequestBuilder
         */
        public AuthenticatorDetailsRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for authenticatorDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about authenticators for this Conjur server </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return authenticatorDetailsCall(xRequestId, _callback);
        }


        /**
         * Execute authenticatorDetails request
         * @return StatusAuthenticatorDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about authenticators for this Conjur server </td><td>  -  </td></tr>
         </table>
         */
        public StatusAuthenticatorDetailsResponse execute() throws ApiException {
            ApiResponse<StatusAuthenticatorDetailsResponse> localVarResp = authenticatorDetailsWithHttpInfo(xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authenticatorDetails request with HTTP info returned
         * @return ApiResponse&lt;StatusAuthenticatorDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about authenticators for this Conjur server </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusAuthenticatorDetailsResponse> executeWithHttpInfo() throws ApiException {
            return authenticatorDetailsWithHttpInfo(xRequestId);
        }

        /**
         * Execute authenticatorDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about authenticators for this Conjur server </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusAuthenticatorDetailsResponse> _callback) throws ApiException {
            return authenticatorDetailsAsync(xRequestId, _callback);
        }
    }

    /**
     * Details about which authenticators are on the Conjur Server
     * Response contains three members: installed, configured, and enabled.  installed: The authenticator is implemented in Conjur and is available for configuration configured: The authenticator has a webservice in the DB that was loaded by policy enabled: The authenticator is enabled (in the DB or in the ENV) and is ready for authentication 
     * @return AuthenticatorDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about authenticators for this Conjur server </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDetailsRequestBuilder authenticatorDetails() throws IllegalArgumentException {
        return new AuthenticatorDetailsRequestBuilder();
    }
    private okhttp3.Call checkAuthenticatorConfigurationCall(String authenticator, String serviceId, String account, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{authenticator}/{service_id}/{account}/status"
            .replace("{" + "authenticator" + "}", localVarApiClient.escapeString(authenticator.toString()))
            .replace("{" + "service_id" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAuthenticatorConfigurationValidateBeforeCall(String authenticator, String serviceId, String account, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticator' is set
        if (authenticator == null) {
            throw new ApiException("Missing the required parameter 'authenticator' when calling checkAuthenticatorConfiguration(Async)");
        }

        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling checkAuthenticatorConfiguration(Async)");
        }

        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling checkAuthenticatorConfiguration(Async)");
        }

        return checkAuthenticatorConfigurationCall(authenticator, serviceId, account, xRequestId, _callback);

    }


    private ApiResponse<Void> checkAuthenticatorConfigurationWithHttpInfo(String authenticator, String serviceId, String account, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = checkAuthenticatorConfigurationValidateBeforeCall(authenticator, serviceId, account, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkAuthenticatorConfigurationAsync(String authenticator, String serviceId, String account, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAuthenticatorConfigurationValidateBeforeCall(authenticator, serviceId, account, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckAuthenticatorConfigurationRequestBuilder {
        private final String authenticator;
        private final String serviceId;
        private final String account;
        private String xRequestId;

        private CheckAuthenticatorConfigurationRequestBuilder(String authenticator, String serviceId, String account) {
            this.authenticator = authenticator;
            this.serviceId = serviceId;
            this.account = account;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return CheckAuthenticatorConfigurationRequestBuilder
         */
        public CheckAuthenticatorConfigurationRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for checkAuthenticatorConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAuthenticatorConfigurationCall(authenticator, serviceId, account, xRequestId, _callback);
        }


        /**
         * Execute checkAuthenticatorConfiguration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkAuthenticatorConfigurationWithHttpInfo(authenticator, serviceId, account, xRequestId);
        }

        /**
         * Execute checkAuthenticatorConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkAuthenticatorConfigurationWithHttpInfo(authenticator, serviceId, account, xRequestId);
        }

        /**
         * Execute checkAuthenticatorConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkAuthenticatorConfigurationAsync(authenticator, serviceId, account, xRequestId, _callback);
        }
    }

    /**
     * Details whether an authentication service has been configured properly
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  Supported Authenticators:   - Azure   - OIDC  Not Supported:   - AWS IAM   - Kubernetes   - LDAP  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     * @param authenticator The type of authenticator (required)
     * @param serviceId URL-Encoded authenticator service ID (required)
     * @param account The organization account name (required)
     * @return CheckAuthenticatorConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CheckAuthenticatorConfigurationRequestBuilder checkAuthenticatorConfiguration(String authenticator, String serviceId, String account) throws IllegalArgumentException {
        if (authenticator == null) throw new IllegalArgumentException("\"authenticator\" is required but got null");
            

        if (serviceId == null) throw new IllegalArgumentException("\"serviceId\" is required but got null");
            

        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            

        return new CheckAuthenticatorConfigurationRequestBuilder(authenticator, serviceId, account);
    }
    private okhttp3.Call checkAuthenticatorStatusCall(String account, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authn-gcp/{account}/status"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAuthenticatorStatusValidateBeforeCall(String account, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling checkAuthenticatorStatus(Async)");
        }

        return checkAuthenticatorStatusCall(account, xRequestId, _callback);

    }


    private ApiResponse<StatusCheckAuthenticatorConfigurationResponse> checkAuthenticatorStatusWithHttpInfo(String account, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = checkAuthenticatorStatusValidateBeforeCall(account, xRequestId, null);
        Type localVarReturnType = new TypeToken<StatusCheckAuthenticatorConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkAuthenticatorStatusAsync(String account, String xRequestId, final ApiCallback<StatusCheckAuthenticatorConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAuthenticatorStatusValidateBeforeCall(account, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<StatusCheckAuthenticatorConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckAuthenticatorStatusRequestBuilder {
        private final String account;
        private String xRequestId;

        private CheckAuthenticatorStatusRequestBuilder(String account) {
            this.account = account;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return CheckAuthenticatorStatusRequestBuilder
         */
        public CheckAuthenticatorStatusRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for checkAuthenticatorStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAuthenticatorStatusCall(account, xRequestId, _callback);
        }


        /**
         * Execute checkAuthenticatorStatus request
         * @return StatusCheckAuthenticatorConfigurationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public StatusCheckAuthenticatorConfigurationResponse execute() throws ApiException {
            ApiResponse<StatusCheckAuthenticatorConfigurationResponse> localVarResp = checkAuthenticatorStatusWithHttpInfo(account, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkAuthenticatorStatus request with HTTP info returned
         * @return ApiResponse&lt;StatusCheckAuthenticatorConfigurationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusCheckAuthenticatorConfigurationResponse> executeWithHttpInfo() throws ApiException {
            return checkAuthenticatorStatusWithHttpInfo(account, xRequestId);
        }

        /**
         * Execute checkAuthenticatorStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusCheckAuthenticatorConfigurationResponse> _callback) throws ApiException {
            return checkAuthenticatorStatusAsync(account, xRequestId, _callback);
        }
    }

    /**
     * Details whether an authentication service has been configured properly
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  This operation only supports the GCP authenticator  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     * @param account The organization account name (required)
     * @return CheckAuthenticatorStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The service was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CheckAuthenticatorStatusRequestBuilder checkAuthenticatorStatus(String account) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            

        return new CheckAuthenticatorStatusRequestBuilder(account);
    }
    private okhttp3.Call checkConjurHealthCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkConjurHealthValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkConjurHealthCall(_callback);

    }


    private ApiResponse<Object> checkConjurHealthWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkConjurHealthValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkConjurHealthAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkConjurHealthValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckConjurHealthRequestBuilder {

        private CheckConjurHealthRequestBuilder() {
        }

        /**
         * Build call for checkConjurHealth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkConjurHealthCall(_callback);
        }


        /**
         * Execute checkConjurHealth request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = checkConjurHealthWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkConjurHealth request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return checkConjurHealthWithHttpInfo();
        }

        /**
         * Execute checkConjurHealth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return checkConjurHealthAsync(_callback);
        }
    }

    /**
     * Health info about conjur
     * You can request health checks against any cluster node using the Conjur API. These routes do not require authentication.  The health check attempts an internal HTTP or TCP connection to each Conjur Enterprise service. It also attempts a simple transaction against all internal databases. 
     * @return CheckConjurHealthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
     </table>
     */
    public CheckConjurHealthRequestBuilder checkConjurHealth() throws IllegalArgumentException {
        return new CheckConjurHealthRequestBuilder();
    }
    private okhttp3.Call checkRemoteHealthCall(String remote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/remote_health/{remote}"
            .replace("{" + "remote" + "}", localVarApiClient.escapeString(remote.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkRemoteHealthValidateBeforeCall(String remote, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'remote' is set
        if (remote == null) {
            throw new ApiException("Missing the required parameter 'remote' when calling checkRemoteHealth(Async)");
        }

        return checkRemoteHealthCall(remote, _callback);

    }


    private ApiResponse<Object> checkRemoteHealthWithHttpInfo(String remote) throws ApiException {
        okhttp3.Call localVarCall = checkRemoteHealthValidateBeforeCall(remote, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkRemoteHealthAsync(String remote, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkRemoteHealthValidateBeforeCall(remote, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckRemoteHealthRequestBuilder {
        private final String remote;

        private CheckRemoteHealthRequestBuilder(String remote) {
            this.remote = remote;
        }

        /**
         * Build call for checkRemoteHealth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkRemoteHealthCall(remote, _callback);
        }


        /**
         * Execute checkRemoteHealth request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = checkRemoteHealthWithHttpInfo(remote);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkRemoteHealth request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return checkRemoteHealthWithHttpInfo(remote);
        }

        /**
         * Execute checkRemoteHealth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return checkRemoteHealthAsync(remote, _callback);
        }
    }

    /**
     * Health info about a given Conjur Enterprise server
     * Use the remote_health route to check the health of any Conjur Enterprise Server from any other Conjur Enterprise Server. With this route, you can check master health relative to a follower, or follower health relative to a standby, and so on. 
     * @param remote The hostname of the remote to check (required)
     * @return CheckRemoteHealthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tests were successful </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The tests failed </td><td>  -  </td></tr>
     </table>
     */
    public CheckRemoteHealthRequestBuilder checkRemoteHealth(String remote) throws IllegalArgumentException {
        if (remote == null) throw new IllegalArgumentException("\"remote\" is required but got null");
            

        return new CheckRemoteHealthRequestBuilder(remote);
    }
    private okhttp3.Call conjurServerInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conjurServerInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return conjurServerInfoCall(_callback);

    }


    private ApiResponse<StatusConjurServerInfoResponse> conjurServerInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = conjurServerInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StatusConjurServerInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call conjurServerInfoAsync(final ApiCallback<StatusConjurServerInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conjurServerInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StatusConjurServerInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConjurServerInfoRequestBuilder {

        private ConjurServerInfoRequestBuilder() {
        }

        /**
         * Build call for conjurServerInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> info </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return conjurServerInfoCall(_callback);
        }


        /**
         * Execute conjurServerInfo request
         * @return StatusConjurServerInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> info </td><td>  -  </td></tr>
         </table>
         */
        public StatusConjurServerInfoResponse execute() throws ApiException {
            ApiResponse<StatusConjurServerInfoResponse> localVarResp = conjurServerInfoWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute conjurServerInfo request with HTTP info returned
         * @return ApiResponse&lt;StatusConjurServerInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> info </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusConjurServerInfoResponse> executeWithHttpInfo() throws ApiException {
            return conjurServerInfoWithHttpInfo();
        }

        /**
         * Execute conjurServerInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> info </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusConjurServerInfoResponse> _callback) throws ApiException {
            return conjurServerInfoAsync(_callback);
        }
    }

    /**
     * Basic information about the Conjur Enterprise server
     * Information about the Conjur Enterprise node which was queried against.  Includes authenticator info, release/version info, configuration details, internal services, and role information. 
     * @return ConjurServerInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> info </td><td>  -  </td></tr>
     </table>
     */
    public ConjurServerInfoRequestBuilder conjurServerInfo() throws IllegalArgumentException {
        return new ConjurServerInfoRequestBuilder();
    }
    private okhttp3.Call getClientInfoCall(String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whoami";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientInfoValidateBeforeCall(String xRequestId, final ApiCallback _callback) throws ApiException {
        return getClientInfoCall(xRequestId, _callback);

    }


    private ApiResponse<StatusGetClientInfoResponse> getClientInfoWithHttpInfo(String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getClientInfoValidateBeforeCall(xRequestId, null);
        Type localVarReturnType = new TypeToken<StatusGetClientInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientInfoAsync(String xRequestId, final ApiCallback<StatusGetClientInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientInfoValidateBeforeCall(xRequestId, _callback);
        Type localVarReturnType = new TypeToken<StatusGetClientInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientInfoRequestBuilder {
        private String xRequestId;

        private GetClientInfoRequestBuilder() {
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return GetClientInfoRequestBuilder
         */
        public GetClientInfoRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getClientInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about the client making the request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientInfoCall(xRequestId, _callback);
        }


        /**
         * Execute getClientInfo request
         * @return StatusGetClientInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about the client making the request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public StatusGetClientInfoResponse execute() throws ApiException {
            ApiResponse<StatusGetClientInfoResponse> localVarResp = getClientInfoWithHttpInfo(xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientInfo request with HTTP info returned
         * @return ApiResponse&lt;StatusGetClientInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about the client making the request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusGetClientInfoResponse> executeWithHttpInfo() throws ApiException {
            return getClientInfoWithHttpInfo(xRequestId);
        }

        /**
         * Execute getClientInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details about the client making the request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusGetClientInfoResponse> _callback) throws ApiException {
            return getClientInfoAsync(xRequestId, _callback);
        }
    }

    /**
     * Provides information about the client making an API request.
     * WhoAmI provides information about the client making an API request. It can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see Host Attributes. 
     * @return GetClientInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about the client making the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetClientInfoRequestBuilder getClientInfo() throws IllegalArgumentException {
        return new GetClientInfoRequestBuilder();
    }
}
