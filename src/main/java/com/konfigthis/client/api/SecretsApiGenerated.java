/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecretsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SecretsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSecretValueCall(String account, String kind, String identifier, String xRequestId, String expirations, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/secrets/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expirations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expirations", expirations));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecretValueValidateBeforeCall(String account, String kind, String identifier, String xRequestId, String expirations, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling createSecretValue(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling createSecretValue(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling createSecretValue(Async)");
        }

        return createSecretValueCall(account, kind, identifier, xRequestId, expirations, body, _callback);

    }


    private ApiResponse<Void> createSecretValueWithHttpInfo(String account, String kind, String identifier, String xRequestId, String expirations, String body) throws ApiException {
        okhttp3.Call localVarCall = createSecretValueValidateBeforeCall(account, kind, identifier, xRequestId, expirations, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createSecretValueAsync(String account, String kind, String identifier, String xRequestId, String expirations, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecretValueValidateBeforeCall(account, kind, identifier, xRequestId, expirations, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateSecretValueRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private String xRequestId;
        private String expirations;
        private String body;

        private CreateSecretValueRequestBuilder(String account, String kind, String identifier) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
        }

        /**
         * Set body
         * @param body Secret data (optional)
         * @return CreateSecretValueRequestBuilder
         */
        public CreateSecretValueRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return CreateSecretValueRequestBuilder
         */
        public CreateSecretValueRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set expirations
         * @param expirations Tells the server to reset the variables expiration date (optional)
         * @return CreateSecretValueRequestBuilder
         */
        public CreateSecretValueRequestBuilder expirations(String expirations) {
            this.expirations = expirations;
            return this;
        }
        
        /**
         * Build call for createSecretValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return createSecretValueCall(account, kind, identifier, xRequestId, expirations, body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createSecretValue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            String body = buildBodyParams();
            createSecretValueWithHttpInfo(account, kind, identifier, xRequestId, expirations, body);
        }

        /**
         * Execute createSecretValue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return createSecretValueWithHttpInfo(account, kind, identifier, xRequestId, expirations, body);
        }

        /**
         * Execute createSecretValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            String body = buildBodyParams();
            return createSecretValueAsync(account, kind, identifier, xRequestId, expirations, body, _callback);
        }
    }

    /**
     * Creates a secret value within the specified variable.
     * Creates a secret value within the specified Secret.   Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     * @param account Organization account name (required)
     * @param kind Type of resource - in almost all cases this should be &#x60;variable&#x60; (required)
     * @param identifier URL-encoded variable ID (required)
     * @return CreateSecretValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSecretValueRequestBuilder createSecretValue(String account, String kind, String identifier) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        return new CreateSecretValueRequestBuilder(account, kind, identifier);
    }
    private okhttp3.Call getMultipleValuesCall(String variableIds, String xRequestId, String acceptEncoding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variableIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable_ids", variableIds));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleValuesValidateBeforeCall(String variableIds, String xRequestId, String acceptEncoding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableIds' is set
        if (variableIds == null) {
            throw new ApiException("Missing the required parameter 'variableIds' when calling getMultipleValues(Async)");
        }

        return getMultipleValuesCall(variableIds, xRequestId, acceptEncoding, _callback);

    }


    private ApiResponse<Object> getMultipleValuesWithHttpInfo(String variableIds, String xRequestId, String acceptEncoding) throws ApiException {
        okhttp3.Call localVarCall = getMultipleValuesValidateBeforeCall(variableIds, xRequestId, acceptEncoding, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleValuesAsync(String variableIds, String xRequestId, String acceptEncoding, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleValuesValidateBeforeCall(variableIds, xRequestId, acceptEncoding, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleValuesRequestBuilder {
        private final String variableIds;
        private String xRequestId;
        private String acceptEncoding;

        private GetMultipleValuesRequestBuilder(String variableIds) {
            this.variableIds = variableIds;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return GetMultipleValuesRequestBuilder
         */
        public GetMultipleValuesRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set acceptEncoding
         * @param acceptEncoding Set the encoding of the response object (optional)
         * @return GetMultipleValuesRequestBuilder
         */
        public GetMultipleValuesRequestBuilder acceptEncoding(String acceptEncoding) {
            this.acceptEncoding = acceptEncoding;
            return this;
        }
        
        /**
         * Build call for getMultipleValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The batch secret values </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> At least one resource was unable to be found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleValuesCall(variableIds, xRequestId, acceptEncoding, _callback);
        }


        /**
         * Execute getMultipleValues request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The batch secret values </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> At least one resource was unable to be found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getMultipleValuesWithHttpInfo(variableIds, xRequestId, acceptEncoding);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleValues request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The batch secret values </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> At least one resource was unable to be found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getMultipleValuesWithHttpInfo(variableIds, xRequestId, acceptEncoding);
        }

        /**
         * Execute getMultipleValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The batch secret values </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> At least one resource was unable to be found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getMultipleValuesAsync(variableIds, xRequestId, acceptEncoding, _callback);
        }
    }

    /**
     * Fetch multiple secrets
     * Fetches multiple secret values in one invocation. It’s faster to fetch secrets in batches than to fetch them one at a time.
     * @param variableIds Comma-delimited, URL-encoded resource IDs of the variables. (required)
     * @return GetMultipleValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The batch secret values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> At least one resource was unable to be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleValuesRequestBuilder getMultipleValues(String variableIds) throws IllegalArgumentException {
        if (variableIds == null) throw new IllegalArgumentException("\"variableIds\" is required but got null");
            

        return new GetMultipleValuesRequestBuilder(variableIds);
    }
    private okhttp3.Call getSecretValueCall(String account, String kind, String identifier, String xRequestId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretValueValidateBeforeCall(String account, String kind, String identifier, String xRequestId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getSecretValue(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling getSecretValue(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getSecretValue(Async)");
        }

        return getSecretValueCall(account, kind, identifier, xRequestId, version, _callback);

    }


    private ApiResponse<String> getSecretValueWithHttpInfo(String account, String kind, String identifier, String xRequestId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(account, kind, identifier, xRequestId, version, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSecretValueAsync(String account, String kind, String identifier, String xRequestId, Integer version, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(account, kind, identifier, xRequestId, version, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSecretValueRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private String xRequestId;
        private Integer version;

        private GetSecretValueRequestBuilder(String account, String kind, String identifier) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return GetSecretValueRequestBuilder
         */
        public GetSecretValueRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set version
         * @param version (**Optional**) Version you want to retrieve (Conjur keeps the last 20 versions of a secret) (optional)
         * @return GetSecretValueRequestBuilder
         */
        public GetSecretValueRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Build call for getSecretValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSecretValueCall(account, kind, identifier, xRequestId, version, _callback);
        }


        /**
         * Execute getSecretValue request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getSecretValueWithHttpInfo(account, kind, identifier, xRequestId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSecretValue request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getSecretValueWithHttpInfo(account, kind, identifier, xRequestId, version);
        }

        /**
         * Execute getSecretValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getSecretValueAsync(account, kind, identifier, xRequestId, version, _callback);
        }
    }

    /**
     * Fetches the value of a secret from the specified Secret.
     * Fetches the value of a secret from the specified Secret. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.  The secret data is returned in the response body.  Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     * @param account Organization account name (required)
     * @param kind Type of resource - in almost all cases this should be &#x60;variable&#x60; (required)
     * @param identifier URL-encoded variable ID (required)
     * @return GetSecretValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The secret value was added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetSecretValueRequestBuilder getSecretValue(String account, String kind, String identifier) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        return new GetSecretValueRequestBuilder(account, kind, identifier);
    }
}
