/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CertificateAuthorityGetSignedCertificateRequest;
import com.konfigthis.client.model.CertificateAuthorityGetSignedCertificateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CertificateAuthorityApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateAuthorityApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateAuthorityApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSignedCertificateCall(String account, String serviceId, String csr, String ttl, CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateAuthorityGetSignedCertificateRequest;

        // create path and map variables
        String localVarPath = "/ca/{account}/{service_id}/sign"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "service_id" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csr != null) {
            localVarFormParams.put("csr", csr);
        }

        if (ttl != null) {
            localVarFormParams.put("ttl", ttl);
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-pem-file"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSignedCertificateValidateBeforeCall(String account, String serviceId, String csr, String ttl, CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getSignedCertificate(Async)");
        }

        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getSignedCertificate(Async)");
        }

        // verify the required parameter 'csr' is set
        if (csr == null) {
            throw new ApiException("Missing the required parameter 'csr' when calling getSignedCertificate(Async)");
        }

        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling getSignedCertificate(Async)");
        }

        // verify the required parameter 'certificateAuthorityGetSignedCertificateRequest' is set
        if (certificateAuthorityGetSignedCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'certificateAuthorityGetSignedCertificateRequest' when calling getSignedCertificate(Async)");
        }

        return getSignedCertificateCall(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId, _callback);

    }


    private ApiResponse<CertificateAuthorityGetSignedCertificateResponse> getSignedCertificateWithHttpInfo(String account, String serviceId, String csr, String ttl, CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getSignedCertificateValidateBeforeCall(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId, null);
        Type localVarReturnType = new TypeToken<CertificateAuthorityGetSignedCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSignedCertificateAsync(String account, String serviceId, String csr, String ttl, CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest, String xRequestId, final ApiCallback<CertificateAuthorityGetSignedCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSignedCertificateValidateBeforeCall(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<CertificateAuthorityGetSignedCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSignedCertificateRequestBuilder {
        private final String account;
        private final String serviceId;
        private final String csr;
        private final String ttl;
        private String xRequestId;

        private GetSignedCertificateRequestBuilder(String account, String serviceId, String csr, String ttl) {
            this.account = account;
            this.serviceId = serviceId;
            this.csr = csr;
            this.ttl = ttl;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return GetSignedCertificateRequestBuilder
         */
        public GetSignedCertificateRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getSignedCertificate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest = buildBodyParams();
            return getSignedCertificateCall(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId, _callback);
        }

        private CertificateAuthorityGetSignedCertificateRequest buildBodyParams() {
            CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest = new CertificateAuthorityGetSignedCertificateRequest();
            certificateAuthorityGetSignedCertificateRequest.csr(this.csr);
            certificateAuthorityGetSignedCertificateRequest.ttl(this.ttl);
            return certificateAuthorityGetSignedCertificateRequest;
        }

        /**
         * Execute getSignedCertificate request
         * @return CertificateAuthorityGetSignedCertificateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
         </table>
         */
        public CertificateAuthorityGetSignedCertificateResponse execute() throws ApiException {
            CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest = buildBodyParams();
            ApiResponse<CertificateAuthorityGetSignedCertificateResponse> localVarResp = getSignedCertificateWithHttpInfo(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSignedCertificate request with HTTP info returned
         * @return ApiResponse&lt;CertificateAuthorityGetSignedCertificateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CertificateAuthorityGetSignedCertificateResponse> executeWithHttpInfo() throws ApiException {
            CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest = buildBodyParams();
            return getSignedCertificateWithHttpInfo(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId);
        }

        /**
         * Execute getSignedCertificate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CertificateAuthorityGetSignedCertificateResponse> _callback) throws ApiException {
            CertificateAuthorityGetSignedCertificateRequest certificateAuthorityGetSignedCertificateRequest = buildBodyParams();
            return getSignedCertificateAsync(account, serviceId, csr, ttl, certificateAuthorityGetSignedCertificateRequest, xRequestId, _callback);
        }
    }

    /**
     * Gets a signed certificate from the configured Certificate Authority service.
     * Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future. 
     * @param account Organization account name (required)
     * @param serviceId Name of the Certificate Authority service (required)
     * @param csr  (required)
     * @param ttl  (required)
     * @param certificateAuthorityGetSignedCertificateRequest Client Certificate Signing Request (required)
     * @return GetSignedCertificateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSignedCertificateRequestBuilder getSignedCertificate(String account, String serviceId, String csr, String ttl) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (serviceId == null) throw new IllegalArgumentException("\"serviceId\" is required but got null");
            if (serviceId != null && serviceId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for serviceId. Length must be greater than or equal to 1.");
            }

        if (csr == null) throw new IllegalArgumentException("\"csr\" is required but got null");
            

        if (ttl == null) throw new IllegalArgumentException("\"ttl\" is required but got null");
            

        return new GetSignedCertificateRequestBuilder(account, serviceId, csr, ttl);
    }
}
