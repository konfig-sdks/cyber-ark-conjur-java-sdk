/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RolesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteRoleMembershipCall(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleMembershipValidateBeforeCall(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling deleteRoleMembership(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling deleteRoleMembership(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteRoleMembership(Async)");
        }

        // verify the required parameter 'members' is set
        if (members == null) {
            throw new ApiException("Missing the required parameter 'members' when calling deleteRoleMembership(Async)");
        }

        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling deleteRoleMembership(Async)");
        }

        return deleteRoleMembershipCall(account, kind, identifier, members, member, xRequestId, _callback);

    }


    private ApiResponse<Void> deleteRoleMembershipWithHttpInfo(String account, String kind, String identifier, String members, String member, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleMembershipValidateBeforeCall(account, kind, identifier, members, member, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRoleMembershipAsync(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleMembershipValidateBeforeCall(account, kind, identifier, members, member, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRoleMembershipRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private final String members;
        private final String member;
        private String xRequestId;

        private DeleteRoleMembershipRequestBuilder(String account, String kind, String identifier, String members, String member) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
            this.members = members;
            this.member = member;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return DeleteRoleMembershipRequestBuilder
         */
        public DeleteRoleMembershipRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for deleteRoleMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was deleted from role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRoleMembershipCall(account, kind, identifier, members, member, xRequestId, _callback);
        }


        /**
         * Execute deleteRoleMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was deleted from role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRoleMembershipWithHttpInfo(account, kind, identifier, members, member, xRequestId);
        }

        /**
         * Execute deleteRoleMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was deleted from role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRoleMembershipWithHttpInfo(account, kind, identifier, members, member, xRequestId);
        }

        /**
         * Execute deleteRoleMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was deleted from role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRoleMembershipAsync(account, kind, identifier, members, member, xRequestId, _callback);
        }
    }

    /**
     * Deletes an existing role membership
     * Deletes an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the &#x60;members&#x60; query parameter is provided, you will get the members of a role.  When the &#x60;members&#x60; and &#x60;member&#x60; query parameters are provided, the role specfified by &#x60;member&#x60; will be removed as a member of the role specified in the endpoint URI. 
     * @param account Organization account name (required)
     * @param kind Type of resource (required)
     * @param identifier ID of the role for which to get the information about (required)
     * @param members Returns a list of the Role&#39;s members. (required)
     * @param member The identifier of the Role to be added as a member. (required)
     * @return DeleteRoleMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member was deleted from role successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleMembershipRequestBuilder deleteRoleMembership(String account, String kind, String identifier, String members, String member) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        if (members == null) throw new IllegalArgumentException("\"members\" is required but got null");
            

        if (member == null) throw new IllegalArgumentException("\"member\" is required but got null");
            if (member != null && member.length() < 1) {
              throw new IllegalArgumentException("Invalid value for member. Length must be greater than or equal to 1.");
            }

        return new DeleteRoleMembershipRequestBuilder(account, kind, identifier, members, member);
    }
    private okhttp3.Call getRoleInformationCall(String account, String kind, String identifier, String xRequestId, String all, String memberships, String members, Integer offset, Integer limit, Boolean count, String search, String graph, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (graph != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("graph", graph));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleInformationValidateBeforeCall(String account, String kind, String identifier, String xRequestId, String all, String memberships, String members, Integer offset, Integer limit, Boolean count, String search, String graph, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getRoleInformation(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling getRoleInformation(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getRoleInformation(Async)");
        }

        return getRoleInformationCall(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph, _callback);

    }


    private ApiResponse<Object> getRoleInformationWithHttpInfo(String account, String kind, String identifier, String xRequestId, String all, String memberships, String members, Integer offset, Integer limit, Boolean count, String search, String graph) throws ApiException {
        okhttp3.Call localVarCall = getRoleInformationValidateBeforeCall(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleInformationAsync(String account, String kind, String identifier, String xRequestId, String all, String memberships, String members, Integer offset, Integer limit, Boolean count, String search, String graph, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleInformationValidateBeforeCall(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleInformationRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private String xRequestId;
        private String all;
        private String memberships;
        private String members;
        private Integer offset;
        private Integer limit;
        private Boolean count;
        private String search;
        private String graph;

        private GetRoleInformationRequestBuilder(String account, String kind, String identifier) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set all
         * @param all Returns an array of Role IDs representing all role memberships, expanded recursively. (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder all(String all) {
            this.all = all;
            return this;
        }
        
        /**
         * Set memberships
         * @param memberships Returns all direct role memberships (members not expanded recursively). (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder memberships(String memberships) {
            this.memberships = memberships;
            return this;
        }
        
        /**
         * Set members
         * @param members Returns a list of the Role&#39;s members. (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set offset
         * @param offset When listing members, start at this item number. (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit When listing members, return up to this many results. (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set count
         * @param count When listing members, if &#x60;true&#x60;, return only the count of members. (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder count(Boolean count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set search
         * @param search When listing members, the results will be narrowed to only those matching the provided string (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set graph
         * @param graph If included in the query returns a graph view of the role (optional)
         * @return GetRoleInformationRequestBuilder
         */
        public GetRoleInformationRequestBuilder graph(String graph) {
            this.graph = graph;
            return this;
        }
        
        /**
         * Build call for getRoleInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the requested role(s)/member(s) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleInformationCall(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph, _callback);
        }


        /**
         * Execute getRoleInformation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the requested role(s)/member(s) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getRoleInformationWithHttpInfo(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleInformation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the requested role(s)/member(s) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getRoleInformationWithHttpInfo(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph);
        }

        /**
         * Execute getRoleInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the requested role(s)/member(s) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getRoleInformationAsync(account, kind, identifier, xRequestId, all, memberships, members, offset, limit, count, search, graph, _callback);
        }
    }

    /**
     * Get role information
     * Gets detailed information about a specific role, including the role members.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  ##### Listing members  If &#x60;members&#x60; is provided, you will get the members of a role.  If a &#x60;kind&#x60; query parameter is given, narrows results to only resources of that kind.  If a &#x60;limit&#x60; is given, returns no more than that number of results. Providing an &#x60;offset&#x60; skips a number of resources before returning the rest. In addition, providing an &#x60;offset&#x60; will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter &#x60;count&#x60; is true, returns only the number of items in the list.  ##### Text search  If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.  ##### Parameter Priority  If Conjur is given any combination of optional parameters, it responds with ONLY results for the parameter of the highest priority.  1. &#x60;graph&#x60; 2. &#x60;all&#x60; 3. &#x60;memberships&#x60; 4. &#x60;members&#x60; 
     * @param account Organization account name (required)
     * @param kind Type of resource (required)
     * @param identifier ID of the role for which to get the information about (required)
     * @return GetRoleInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the requested role(s)/member(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleInformationRequestBuilder getRoleInformation(String account, String kind, String identifier) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        return new GetRoleInformationRequestBuilder(account, kind, identifier);
    }
    private okhttp3.Call updateRoleMembershipCall(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleMembershipValidateBeforeCall(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling updateRoleMembership(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling updateRoleMembership(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateRoleMembership(Async)");
        }

        // verify the required parameter 'members' is set
        if (members == null) {
            throw new ApiException("Missing the required parameter 'members' when calling updateRoleMembership(Async)");
        }

        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling updateRoleMembership(Async)");
        }

        return updateRoleMembershipCall(account, kind, identifier, members, member, xRequestId, _callback);

    }


    private ApiResponse<Void> updateRoleMembershipWithHttpInfo(String account, String kind, String identifier, String members, String member, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = updateRoleMembershipValidateBeforeCall(account, kind, identifier, members, member, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRoleMembershipAsync(String account, String kind, String identifier, String members, String member, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleMembershipValidateBeforeCall(account, kind, identifier, members, member, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRoleMembershipRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private final String members;
        private final String member;
        private String xRequestId;

        private UpdateRoleMembershipRequestBuilder(String account, String kind, String identifier, String members, String member) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
            this.members = members;
            this.member = member;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return UpdateRoleMembershipRequestBuilder
         */
        public UpdateRoleMembershipRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for updateRoleMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was added to role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRoleMembershipCall(account, kind, identifier, members, member, xRequestId, _callback);
        }


        /**
         * Execute updateRoleMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was added to role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateRoleMembershipWithHttpInfo(account, kind, identifier, members, member, xRequestId);
        }

        /**
         * Execute updateRoleMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was added to role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateRoleMembershipWithHttpInfo(account, kind, identifier, members, member, xRequestId);
        }

        /**
         * Execute updateRoleMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Member was added to role successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateRoleMembershipAsync(account, kind, identifier, members, member, xRequestId, _callback);
        }
    }

    /**
     * Update or modify an existing role membership
     * Updates or modifies an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the &#x60;members&#x60; query parameter is provided, you will get the members of a role.  When the &#x60;members&#x60; and &#x60;member&#x60; query parameters are provided, the role specfified by &#x60;member&#x60; will be added as a member of the role specified in the endpoint URI. 
     * @param account Organization account name (required)
     * @param kind Type of resource (required)
     * @param identifier ID of the role for which to get the information about (required)
     * @param members Returns a list of the Role&#39;s members. (required)
     * @param member The identifier of the Role to be added as a member. (required)
     * @return UpdateRoleMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member was added to role successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleMembershipRequestBuilder updateRoleMembership(String account, String kind, String identifier, String members, String member) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        if (members == null) throw new IllegalArgumentException("\"members\" is required but got null");
            

        if (member == null) throw new IllegalArgumentException("\"member\" is required but got null");
            if (member != null && member.length() < 1) {
              throw new IllegalArgumentException("Invalid value for member. Length must be greater than or equal to 1.");
            }

        return new UpdateRoleMembershipRequestBuilder(account, kind, identifier, members, member);
    }
}
