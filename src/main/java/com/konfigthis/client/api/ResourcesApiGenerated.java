/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ResourcesShowResourceDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResourcesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listCall(String xRequestId, String account, String kind, String search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (actingAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acting_as", actingAs));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String xRequestId, String account, String kind, String search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        return listCall(xRequestId, account, kind, search, offset, limit, count, role, actingAs, _callback);

    }


    private ApiResponse<List<Object>> listWithHttpInfo(String xRequestId, String account, String kind, String search, Integer offset, Integer limit, Boolean count, String role, String actingAs) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(xRequestId, account, kind, search, offset, limit, count, role, actingAs, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String xRequestId, String account, String kind, String search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(xRequestId, account, kind, search, offset, limit, count, role, actingAs, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String xRequestId;
        private String account;
        private String kind;
        private String search;
        private Integer offset;
        private Integer limit;
        private Boolean count;
        private String role;
        private String actingAs;

        private ListRequestBuilder() {
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set account
         * @param account Organization account name (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder account(String account) {
            this.account = account;
            return this;
        }
        
        /**
         * Set kind
         * @param kind Type of resource (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder kind(String kind) {
            this.kind = kind;
            return this;
        }
        
        /**
         * Set search
         * @param search Filter resources based on this value by name (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set offset
         * @param offset When listing resources, start at this item number. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit When listing resources, return up to this many results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set count
         * @param count When listing resources, if &#x60;true&#x60;, return only the count of the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder count(Boolean count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set role
         * @param role Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set actingAs
         * @param actingAs Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder actingAs(String actingAs) {
            this.actingAs = actingAs;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains a list of resources </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(xRequestId, account, kind, search, offset, limit, count, role, actingAs, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains a list of resources </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            ApiResponse<List<Object>> localVarResp = listWithHttpInfo(xRequestId, account, kind, search, offset, limit, count, role, actingAs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains a list of resources </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(xRequestId, account, kind, search, offset, limit, count, role, actingAs);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains a list of resources </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            return listAsync(xRequestId, account, kind, search, offset, limit, count, role, actingAs, _callback);
        }
    }

    /**
     * Lists resources within an organization account.
     * Lists resources within an organization account.  In the absence of an &#x60;account&#x60; query parameter, shows results for the account of the authorization token user.  If an &#x60;account&#x60; query parameter is given, shows results for the specified account.  If a &#x60;kind&#x60; query parameter is given, narrows results to only resources of that kind.  If a &#x60;limit&#x60; is given, returns no more than that number of results. Providing an &#x60;offset&#x60; skips a number of resources before returning the rest. In addition, providing an &#x60;offset&#x60; will give &#x60;limit&#x60; a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter &#x60;count&#x60; is &#x60;true&#x60;, returns only the number of items in the list.  ##### Text search  If the &#x60;search&#x60; parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called &#x60;name&#x60; appear first, then those with another matching annotation value, and finally those with a matching  &#x60;kind&#x60;.\&quot; 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains a list of resources </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listResourcesCall(String account, String xRequestId, String kind, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (actingAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acting_as", actingAs));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourcesValidateBeforeCall(String account, String xRequestId, String kind, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling listResources(Async)");
        }

        return listResourcesCall(account, xRequestId, kind, search, offset, limit, count, role, actingAs, _callback);

    }


    private ApiResponse<Void> listResourcesWithHttpInfo(String account, String xRequestId, String kind, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs) throws ApiException {
        okhttp3.Call localVarCall = listResourcesValidateBeforeCall(account, xRequestId, kind, search, offset, limit, count, role, actingAs, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listResourcesAsync(String account, String xRequestId, String kind, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourcesValidateBeforeCall(account, xRequestId, kind, search, offset, limit, count, role, actingAs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListResourcesRequestBuilder {
        private final String account;
        private String xRequestId;
        private String kind;
        private ERRORUNKNOWN search;
        private Integer offset;
        private Integer limit;
        private Boolean count;
        private String role;
        private String actingAs;

        private ListResourcesRequestBuilder(String account) {
            this.account = account;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set kind
         * @param kind Type of resource (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder kind(String kind) {
            this.kind = kind;
            return this;
        }
        
        /**
         * Set search
         * @param search Filter resources based on this value by name (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder search(ERRORUNKNOWN search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set offset
         * @param offset When listing resources, start at this item number. (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit When listing resources, return up to this many results. (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set count
         * @param count When listing resources, if &#x60;true&#x60;, return only the count of the results. (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder count(Boolean count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set role
         * @param role Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set actingAs
         * @param actingAs Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListResourcesRequestBuilder
         */
        public ListResourcesRequestBuilder actingAs(String actingAs) {
            this.actingAs = actingAs;
            return this;
        }
        
        /**
         * Build call for listResources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listResourcesCall(account, xRequestId, kind, search, offset, limit, count, role, actingAs, _callback);
        }


        /**
         * Execute listResources request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listResourcesWithHttpInfo(account, xRequestId, kind, search, offset, limit, count, role, actingAs);
        }

        /**
         * Execute listResources request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listResourcesWithHttpInfo(account, xRequestId, kind, search, offset, limit, count, role, actingAs);
        }

        /**
         * Execute listResources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listResourcesAsync(account, xRequestId, kind, search, offset, limit, count, role, actingAs, _callback);
        }
    }

    /**
     * Lists resources within an organization account.
     * Lists resources within an organization account.  If a &#x60;kind&#x60; query parameter is given, narrows results to only resources of that kind.  If a &#x60;limit&#x60; is given, returns no more than that number of results. Providing an &#x60;offset&#x60; skips a number of resources before returning the rest. In addition, providing an &#x60;offset&#x60; will give &#x60;limit&#x60; a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter &#x60;count&#x60; is &#x60;true&#x60;, returns only the number of items in the list.  ##### Text search  If the &#x60;search&#x60; parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called &#x60;name&#x60; appear first, then those with another matching annotation value, and finally those with a matching  &#x60;kind&#x60;. 
     * @param account Organization account name (required)
     * @return ListResourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ListResourcesRequestBuilder listResources(String account) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        return new ListResourcesRequestBuilder(account);
    }
    private okhttp3.Call listResourcesForKindCall(String account, String kind, String xRequestId, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/{account}/{kind}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (actingAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acting_as", actingAs));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourcesForKindValidateBeforeCall(String account, String kind, String xRequestId, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling listResourcesForKind(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling listResourcesForKind(Async)");
        }

        return listResourcesForKindCall(account, kind, xRequestId, search, offset, limit, count, role, actingAs, _callback);

    }


    private ApiResponse<Void> listResourcesForKindWithHttpInfo(String account, String kind, String xRequestId, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs) throws ApiException {
        okhttp3.Call localVarCall = listResourcesForKindValidateBeforeCall(account, kind, xRequestId, search, offset, limit, count, role, actingAs, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listResourcesForKindAsync(String account, String kind, String xRequestId, ERRORUNKNOWN search, Integer offset, Integer limit, Boolean count, String role, String actingAs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourcesForKindValidateBeforeCall(account, kind, xRequestId, search, offset, limit, count, role, actingAs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListResourcesForKindRequestBuilder {
        private final String account;
        private final String kind;
        private String xRequestId;
        private ERRORUNKNOWN search;
        private Integer offset;
        private Integer limit;
        private Boolean count;
        private String role;
        private String actingAs;

        private ListResourcesForKindRequestBuilder(String account, String kind) {
            this.account = account;
            this.kind = kind;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set search
         * @param search Filter resources based on this value by name (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder search(ERRORUNKNOWN search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set offset
         * @param offset When listing resources, start at this item number. (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit When listing resources, return up to this many results. (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set count
         * @param count When listing resources, if &#x60;true&#x60;, return only the count of the results. (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder count(Boolean count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set role
         * @param role Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set actingAs
         * @param actingAs Retrieves the resources list for a different role if the authenticated role has access (optional)
         * @return ListResourcesForKindRequestBuilder
         */
        public ListResourcesForKindRequestBuilder actingAs(String actingAs) {
            this.actingAs = actingAs;
            return this;
        }
        
        /**
         * Build call for listResourcesForKind
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listResourcesForKindCall(account, kind, xRequestId, search, offset, limit, count, role, actingAs, _callback);
        }


        /**
         * Execute listResourcesForKind request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listResourcesForKindWithHttpInfo(account, kind, xRequestId, search, offset, limit, count, role, actingAs);
        }

        /**
         * Execute listResourcesForKind request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listResourcesForKindWithHttpInfo(account, kind, xRequestId, search, offset, limit, count, role, actingAs);
        }

        /**
         * Execute listResourcesForKind request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listResourcesForKindAsync(account, kind, xRequestId, search, offset, limit, count, role, actingAs, _callback);
        }
    }

    /**
     * Lists resources of the same kind within an organization account.
     * Lists resources of the same kind within an organization account.  Kinds of resources include: policy, user, host, group, layer, or variable  If a &#x60;limit&#x60; is given, returns no more than that number of results. Providing an &#x60;offset&#x60; skips a number of resources before returning the rest. In addition, providing an &#x60;offset&#x60; will give &#x60;limit&#x60; a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter &#x60;count&#x60; is &#x60;true&#x60;, returns only the number of items in the list.  ##### Text search  If the &#x60;search&#x60; parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called &#x60;name&#x60; appear first, then those with another matching annotation value, and finally those with a matching  &#x60;kind&#x60;. 
     * @param account Organization account name (required)
     * @param kind Type of resource (required)
     * @return ListResourcesForKindRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ListResourcesForKindRequestBuilder listResourcesForKind(String account, String kind) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        return new ListResourcesForKindRequestBuilder(account, kind);
    }
    private okhttp3.Call showResourceDetailsCall(String account, String kind, String identifier, String xRequestId, Boolean permittedRoles, String privilege, Boolean check, String role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/{account}/{kind}/{identifier}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permittedRoles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permitted_roles", permittedRoles));
        }

        if (privilege != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privilege", privilege));
        }

        if (check != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check", check));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "conjurAuth", "conjurKubernetesMutualTls" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showResourceDetailsValidateBeforeCall(String account, String kind, String identifier, String xRequestId, Boolean permittedRoles, String privilege, Boolean check, String role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling showResourceDetails(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling showResourceDetails(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling showResourceDetails(Async)");
        }

        return showResourceDetailsCall(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role, _callback);

    }


    private ApiResponse<ResourcesShowResourceDetailsResponse> showResourceDetailsWithHttpInfo(String account, String kind, String identifier, String xRequestId, Boolean permittedRoles, String privilege, Boolean check, String role) throws ApiException {
        okhttp3.Call localVarCall = showResourceDetailsValidateBeforeCall(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role, null);
        Type localVarReturnType = new TypeToken<ResourcesShowResourceDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showResourceDetailsAsync(String account, String kind, String identifier, String xRequestId, Boolean permittedRoles, String privilege, Boolean check, String role, final ApiCallback<ResourcesShowResourceDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showResourceDetailsValidateBeforeCall(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role, _callback);
        Type localVarReturnType = new TypeToken<ResourcesShowResourceDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowResourceDetailsRequestBuilder {
        private final String account;
        private final String kind;
        private final String identifier;
        private String xRequestId;
        private Boolean permittedRoles;
        private String privilege;
        private Boolean check;
        private String role;

        private ShowResourceDetailsRequestBuilder(String account, String kind, String identifier) {
            this.account = account;
            this.kind = kind;
            this.identifier = identifier;
        }

        /**
         * Set xRequestId
         * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
         * @return ShowResourceDetailsRequestBuilder
         */
        public ShowResourceDetailsRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set permittedRoles
         * @param permittedRoles Lists the roles which have the named privilege on a resource. (optional)
         * @return ShowResourceDetailsRequestBuilder
         */
        public ShowResourceDetailsRequestBuilder permittedRoles(Boolean permittedRoles) {
            this.permittedRoles = permittedRoles;
            return this;
        }
        
        /**
         * Set privilege
         * @param privilege Level of privilege to filter on. Can only be used in combination with &#x60;permitted_roles&#x60; or &#x60;check&#x60; parameter. (optional)
         * @return ShowResourceDetailsRequestBuilder
         */
        public ShowResourceDetailsRequestBuilder privilege(String privilege) {
            this.privilege = privilege;
            return this;
        }
        
        /**
         * Set check
         * @param check Check whether a role has a privilege on a resource. (optional)
         * @return ShowResourceDetailsRequestBuilder
         */
        public ShowResourceDetailsRequestBuilder check(Boolean check) {
            this.check = check;
            return this;
        }
        
        /**
         * Set role
         * @param role Role to check privilege on. Can only be used in combination with &#x60;check&#x60; parameter. (optional)
         * @return ShowResourceDetailsRequestBuilder
         */
        public ShowResourceDetailsRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for showResourceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the list of role memberships or permitted roles </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Permissions check was successful </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showResourceDetailsCall(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role, _callback);
        }


        /**
         * Execute showResourceDetails request
         * @return ResourcesShowResourceDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the list of role memberships or permitted roles </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Permissions check was successful </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ResourcesShowResourceDetailsResponse execute() throws ApiException {
            ApiResponse<ResourcesShowResourceDetailsResponse> localVarResp = showResourceDetailsWithHttpInfo(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showResourceDetails request with HTTP info returned
         * @return ApiResponse&lt;ResourcesShowResourceDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the list of role memberships or permitted roles </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Permissions check was successful </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourcesShowResourceDetailsResponse> executeWithHttpInfo() throws ApiException {
            return showResourceDetailsWithHttpInfo(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role);
        }

        /**
         * Execute showResourceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response body contains the list of role memberships or permitted roles </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Permissions check was successful </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourcesShowResourceDetailsResponse> _callback) throws ApiException {
            return showResourceDetailsAsync(account, kind, identifier, xRequestId, permittedRoles, privilege, check, role, _callback);
        }
    }

    /**
     * Shows a description of a single resource.
     * Details about a single resource.  If &#x60;permitted_roles&#x60; and &#x60;privilege&#x60; are given, Conjur lists the roles with the specified privilege on the resource.  If &#x60;check&#x60;, &#x60;privilege&#x60; and &#x60;role&#x60; are given, Conjur checks if the specified role has the privilege on the resource.  If &#x60;permitted_roles&#x60; and &#x60;check&#x60; are both given, Conjur responds to the &#x60;check&#x60; call ONLY.  ##### Permissions Required 
     * @param account Organization account name (required)
     * @param kind Type of resource (required)
     * @param identifier ID of the resource for which to get the information about (required)
     * @return ShowResourceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the list of role memberships or permitted roles </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Permissions check was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks the necessary privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A request parameter was either missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ShowResourceDetailsRequestBuilder showResourceDetails(String account, String kind, String identifier) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            if (account != null && account.length() < 1) {
              throw new IllegalArgumentException("Invalid value for account. Length must be greater than or equal to 1.");
            }

        if (kind == null) throw new IllegalArgumentException("\"kind\" is required but got null");
            if (kind != null && kind.length() < 1) {
              throw new IllegalArgumentException("Invalid value for kind. Length must be greater than or equal to 1.");
            }

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            if (identifier != null && identifier.length() < 1) {
              throw new IllegalArgumentException("Invalid value for identifier. Length must be greater than or equal to 1.");
            }

        return new ShowResourceDetailsRequestBuilder(account, kind, identifier);
    }
}
