openapi: 3.0.0
info:
  contact:
    email: conj_maintainers@cyberark.com
  description: "This is an API definition for CyberArk Conjur Open Source. You can\
    \ find out more at [Conjur.org](https://www.conjur.org/)."
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Conjur
  version: 5.3.1
  x-api-status-urls: false
  x-konfig-ignore:
    object-with-no-properties: true
externalDocs:
  description: Find out more about Conjur
  url: https://conjur.org
servers:
- url: ""
security:
- basicAuth: []
- conjurAuth: []
- conjurKubernetesMutualTls: []
tags:
- description: Authentication
  name: authentication
- description: Server status
  name: status
- description: Resources
  name: resources
- description: Secrets
  name: secrets
- description: Policies
  name: policies
- description: RBAC
  name: roles
- description: Host factories
  name: host factory
- description: SSH keys
  name: public keys
- description: Certificate authority
  name: certificate authority
paths:
  /authn/{account}/login:
    get:
      description: |
        Passwords are stored in the Conjur database using `bcrypt`
        with a work factor of 12. Therefore, login is a fairly expensive operation.
        However, once the API key is obtained, it may be used to inexpensively
        obtain access tokens by calling the Authenticate method. An access token
        is required to use most other parts of the Conjur API.

        The Basic authentication-compliant header is formed by:
        1. Concatenating the role's name, a literal colon character ':',
           and the password or API key to create the authentication string.
        2. Base64-encoding the authentication string.
        3. Prefixing the authentication string with the scheme: `Basic `
           (note the required space).
        4. Providing the result as the value of the `Authorization` HTTP header:
           `Authorization: Basic <authentication string>`.

        Your HTTP/REST client probably provides HTTP basic authentication support.
        For example, `curl` and all of the Conjur client libraries provide this.

        Note that machine roles (Hosts) do not have passwords and do not need to
        use this endpoint.
      operationId: Authentication_getUserApiKey
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/requestBody/content/text~1plain/schema'
          description: The response body is the API key
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
        "500":
          description: "Malfromed request, rejected by the server"
      summary: |
        Gets the API key of a user given the username and password
        via HTTP Basic Authentication.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--authn-account-login
      x-accepts: text/plain
  /authn-k8s/{service_id}/inject_client_cert:
    post:
      description: |
        This request sends a Certificate Signing Request to Conjur,
        which uses the Kubernetes API to inject a client certificate into the
        application pod.

        This endpoint requires a properly configured Conjur Certificate Authority
        service alongside a properly configured and enabled Kubernetes authenticator.
        For detailed instructions,
        see [the documentation](https://docs.conjur.org/Latest/en/Content/Integrations/kubernetes.htm).
      operationId: Authentication_sendCsrForClientCertInjection
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: "Dot-separated policy tree, prefixed by `host.`, where the application\
          \ identity is defined"
        example: host/conjur/authn-k8s/my-authenticator-id/apps
        explode: false
        in: header
        name: Host-Id-Prefix
        required: false
        schema:
          type: string
        style: simple
        x-konfig-original-example: host/conjur/authn-k8s/my-authenticator-id/apps
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/AuthenticationSendCsrForClientCertInjectionRequest'
        description: |
          Valid certificate signing request that includes the host
          identity suffix as the CSR common name
        required: true
      responses:
        "202":
          description: The injected certificate was accepted.
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
      summary: |
        For applications running in Kubernetes; sends Conjur a certificate
        signing request (CSR) and requests a client certificate injected into
        the application's Kubernetes pod.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/plain
      x-accepts: application/json
  /authn-ldap/{service_id}/{account}/login:
    get:
      description: |
        Exchange your LDAP credentials for a Conjur API key. Once the
        API key is obtained, it may be used to inexpensively obtain access
        tokens by calling the Authenticate method. An access token
        is required to use most other parts of the Conjur API.

        The Basic authentication-compliant header is formed by:
        1. Concatenating the LDAP username, a literal colon character ':',
           and the password to create the authentication string.
        2. Base64-encoding the authentication string.
        3. Prefixing the authentication string with the scheme: `Basic `
           (note the required space).
        4. Providing the result as the value of the `Authorization` HTTP header:
           `Authorization: Basic <authentication string>`.

        Your HTTP/REST client probably provides HTTP basic authentication support.
      operationId: Authentication_exchangeLdapCredentialsForApiKey
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1login/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
        "500":
          description: "Malfromed request, rejected by the server"
      summary: |
        Gets the Conjur API key of a user given the LDAP username and
        password via HTTP Basic Authentication.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--authn-ldap-service_id-account-login
      x-accepts: application/json
  /authn/{account}/{login}/authenticate:
    post:
      description: |
        A client can obtain an access token by presenting a valid
        login name and API key.

        The access token is used to communicate to the REST API that the bearer
        of the token has been authorized to access the API and perform specific
        actions specified by the scope that was granted during authorization.

        The `login` must be URL encoded. For example, `alice@devops` must be
        encoded as `alice%40devops`.

        The `service_id`, if given, must be URL encoded. For example,
        `prod/gke` must be encoded as `prod%2Fgke`.

        For host authentication, the `login` is the host ID with the prefix
        `host/`. For example, the host webserver would login as `host/webserver`,
        and would be encoded as `host%2Fwebserver`.

        For API usage, the base64-encoded access token is ordinarily passed as an HTTP
        Authorization header as `Authorization: Token token=<base64-encoded token>`.

        This is the default authentication endpoint only. See other endpoints for
        details on authenticating to Conjur using another method, e.g. for
        applications running in Azure or Kubernetes.
      operationId: Authentication_obtainAccessToken
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: "URL-encoded login name. For users, it’s the user ID. For hosts,\
          \ the login name is `host/<host-id>`"
        explode: false
        in: path
        name: login
        required: true
        schema:
          example: admin
          minLength: 1
          type: string
          x-konfig-original-example: admin
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-account-login-authenticate-post-parameters-1-schema
        style: simple
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-account-login-authenticate-post-parameters-2-schema
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/AuthenticationObtainAccessTokenRequest'
        description: API Key
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationObtainAccessTokenResponse'
          description: The response is an access token for conjur
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: |
        Gets a short-lived access token, which is required in the header
        of most subsequent API requests.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/plain
      x-accepts: text/plain
  /authn-iam/{service_id}/{account}/{login}/authenticate:
    post:
      description: |
        The access token is used to communicate to the REST API that
        the bearer of the token has been authorized to access the API and perform
        specific actions specified by the scope that was granted during authorization.

        For API usage, the base64-encoded access token is ordinarily passed as an HTTP
        Authorization header as `Authorization: Token token=<base64-encoded token>`.

        The `login` must be URL encoded and the host ID must have the prefix
        `host/`. For example, the host webserver would login as `host/webserver`,
        and would be encoded as `host%2Fwebserver`.

        The `service_id`, if given, must be URL encoded. For example,
        `prod/gke` must be encoded as `prod%2Fgke`.

        For detailed instructions on authenticating to Conjur using this endpoint,
        reference the documentation:
        [AWS IAM Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/AWS_IAM_Authenticator.htm) (`authn-iam`).
      operationId: Authentication_getShortLivedToken
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: "URL-encoded login name. For hosts, the login name is `host/<host-id>`"
        explode: false
        in: path
        name: login
        required: true
        schema:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        style: simple
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-iam-service_id-account-login-authenticate-post-parameters-3-schema
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/AuthenticationGetShortLivedTokenRequest'
        description: AWS Signature header
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: Get a short-lived access token for applications running in AWS.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/plain
      x-accepts: application/json
  /authn-azure/{service_id}/{account}/{login}/authenticate:
    post:
      description: |
        The access token is used to communicate to the REST API that
        the bearer of the token has been authorized to access the API and perform
        specific actions specified by the scope that was granted during authorization.

        For API usage, the base64-encoded access token is ordinarily passed as an HTTP
        Authorization header as `Authorization: Token token=<base64-encoded token>`.

        The `login` must be URL encoded and the host ID must have the prefix
        `host/`. For example, the host webserver would login as `host/webserver`,
        and would be encoded as `host%2Fwebserver`.

        The `service_id`, if given, must be URL encoded. For example,
        `prod/gke` must be encoded as `prod%2Fgke`.

        To authenticate to Conjur using this endpoint, reference the detailed
        documentation: [Azure Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/azure_authn.htm) (`authn-azure`).
      operationId: Authentication_azureAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: "URL-encoded login name. For users, it’s the user ID. For hosts,\
          \ the login name is `host/<host-id>`"
        explode: false
        in: path
        name: login
        required: true
        schema:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        style: simple
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-azure-service_id-account-login-authenticate-post-parameters-3-schema
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationAzureAuthenticateRequest'
        description: Azure identity token
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: Gets a short-lived access token for applications running in Azure.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-azure-service_id-account-login-authenticate
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /authn-gcp/{account}/authenticate:
    post:
      description: |
        Use the GCP Authenticator API to send an authentication
        request from a Google Cloud service to Conjur.

        For more information, see [the documentation](https://docs.conjur.org/Latest/en/Content/Operations/Services/cjr-gcp-authn.htm).
      operationId: Authentication_gcpAuthnAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        example: dev
        explode: false
        in: path
        name: account
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: dev
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          enum:
          - base64
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationGcpAuthnAuthenticateRequest'
        description: Google JWT identity token for the Google Cloud service
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1login/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: |
        Gets a short-lived access token for applications running in
        Google Cloud Platform.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-gcp-account-authenticate
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /authn-k8s/{service_id}/{account}/{login}/authenticate:
    post:
      description: |
        The access token is used to communicate to the REST API that
        the bearer of the token has been authorized to access the API and perform
        specific actions specified by the scope that was granted during authorization.

        For API usage, the base64-encoded access token is ordinarily passed as an HTTP
        Authorization header as `Authorization: Token token=<base64-encoded token>`.

        The `login` must be URL encoded and the host ID must have the prefix
        `host/`. For example, the host webserver would login as `host/webserver`,
        and would be encoded as `host%2Fwebserver`.

        The `service_id`, if given, must be URL encoded. For example,
        `prod/gke` must be encoded as `prod%2Fgke`.

        To authenticate to Conjur using this endpoint, reference the detailed
        documentation: [Kubernetes Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/k8s_auth.htm) (`authn-k8s`).
      operationId: Authentication_kubernetesAuthnAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: "URL-encoded login name. For users, it’s the user ID. For hosts,\
          \ the login name is `host/<host-id>`"
        explode: false
        in: path
        name: login
        required: true
        schema:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        style: simple
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-k8s-service_id-account-login-authenticate-post-parameters-3-schema
        style: simple
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      summary: Gets a short-lived access token for applications running in Kubernetes.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-k8s-service_id-account-login-authenticate
      x-accepts: application/json
  /authn-ldap/{service_id}/{account}/{login}/authenticate:
    post:
      description: |
        The access token is used to communicate to the REST API that
        the bearer of the token has been authorized to access the API and perform
        specific actions specified by the scope that was granted during authorization.

        For API usage, the base64-encoded access token is ordinarily passed as an HTTP
        Authorization header as `Authorization: Token token=<base64-encoded token>`.

        The `login` must be URL encoded. For example, `alice@devops` must be
        encoded as `alice%40devops`.

        The `service_id`, if given, must be URL encoded. For example,
        `prod/gke` must be encoded as `prod%2Fgke`.

        For host authentication, the `login` is the host ID with the prefix
        `host/`. For example, the host webserver would login as `host/webserver`,
        and would be encoded as `host%2Fwebserver`.

        To authenticate to Conjur using a LDAP, reference the detailed documentation:
        [LDAP Authenticator](https://docs.conjur.org/Latest/en/Content/Integrations/ldap/ldap_authenticator.html) (`authn-ldap`).
      operationId: Authentication_ldapAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: "URL-encoded login name. For users, it’s the user ID. For hosts,\
          \ the login name is `host/<host-id>`"
        explode: false
        in: path
        name: login
        required: true
        schema:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        style: simple
      - description: Setting the Accept-Encoding header to base64 will return a pre-encoded
          access token
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-ldap-service_id-account-login-authenticate-post-parameters-3-schema
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/requestBody/content/text~1plain/schema'
        description: API key
        required: false
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: |
        Gets a short-lived access token for users and hosts using their
        LDAP identity to access the Conjur API.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/plain
      x-accepts: application/json
  /authn-oidc/{service_id}/{account}/authenticate:
    post:
      description: |
        Use the OIDC Authenticator to leverage the identity layer
        provided by OIDC to authenticate with Conjur.

        For more information see [the documentation](https://docs.conjur.org/Latest/en/Content/OIDC/OIDC.htm).
      operationId: Authentication_oidcAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationOidcAuthenticateRequest'
        description: ID token
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
      security: []
      summary: |
        Gets a short-lived access token for applications using OpenID
        Connect (OIDC) to access the Conjur API.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-oidc-service_id-account-authenticate
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /authn-jwt/{service_id}/{account}/authenticate:
    post:
      description: |
        Use the JWT Authenticator to leverage the identity layer
        provided by JWT to authenticate with Conjur.
      operationId: Authentication_jwtAuthenticate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationJwtAuthenticateRequest'
        description: ID token
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: |
        Gets a short-lived access token for applications using JSON Web Token (JWT)
        to access the Conjur API.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-jwt-service_id-account-authenticate
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /authn-jwt/{service_id}/{account}/{id}/authenticate:
    post:
      description: |
        Use the JWT Authenticator to leverage the identity layer
        provided by JWT to authenticate with Conjur.
      operationId: Authentication_authenticateWithId
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Organization user id
        explode: false
        in: path
        name: id
        required: true
        schema:
          description: Represents the user/host identity
          example: SomeUserID
          minLength: 1
          type: string
          x-konfig-original-example: SomeUserID
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-jwt-service_id-account-id-authenticate-post-parameters-1-schema
        style: simple
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1authn-jwt~1%7Bservice_id%7D~1%7Baccount%7D~1authenticate/post/requestBody/content/application~1x-www-form-urlencoded/schema'
        description: ID token
        required: true
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      security: []
      summary: |
        Gets a short-lived access token for applications using JSON Web Token (JWT)
        to access the Conjur API. Covers the case of use of optional URL parameter "ID"
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--authn-jwt-service_id-account-id-authenticate
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /authn/{account}/password:
    put:
      description: |
        You must provide the login name and current password or
        API key of the user whose password is to be updated in an HTTP Basic
        Authentication header. Also replaces the user’s API key with a new
        securely generated random value. You can fetch the new API key using
        the Login method.

        The Basic authentication-compliant header is formed by:
        1. Concatenating the role's name, a literal colon character ':',
           and the password or API key to create the authentication string.
        2. Base64-encoding the authentication string.
        3. Prefixing the authentication string with the scheme: `Basic `
           (note the required space).
        4. Providing the result as the value of the `Authorization` HTTP header:
           `Authorization: Basic <authentication string>`.

        Your HTTP/REST client probably provides HTTP basic authentication
        support. For example, `curl` and all of the Conjur client libraries
        provide this.

        Note that machine roles (Hosts) do not have passwords. They authenticate
        using their API keys, while passwords are only used by human users.
      operationId: Authentication_changeUserPassword
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/AuthenticationChangeUserPasswordRequest'
        description: New password
        required: true
      responses:
        "204":
          description: The password has been changed
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "422":
          description: A request parameter was either missing or invalid.
        "500":
          description: "Malfromed request, rejected by the server"
      summary: Changes a user’s password.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/plain
      x-accepts: application/json
  /authn/{account}/api_key:
    put:
      description: |
        Any role can rotate its own API key. The name and password
        (for users) or current API key (for hosts and users) of the role must
        be provided via HTTP Basic Authorization.

        To rotate another role's API key, you may provide your name and password
        (for users) or current API key (for hosts and users) via HTTP Basic
        Authorization with the request. Alternatively, you may provide your
        Conjur access token via the standard Conjur `Authorization` header.

        The Basic authentication-compliant header is formed by:
        1. Concatenating the role's name, a literal colon character ':',
           and the password or API key to create the authentication string.
        2. Base64-encoding the authentication string.
        3. Prefixing the authentication string with the scheme: `Basic `
           (note the required space).
        4. Providing the result as the value of the `Authorization` HTTP header:
           `Authorization: Basic <authentication string>`.

        Your HTTP/REST client probably provides HTTP basic authentication support.
        For example, `curl` and all of the Conjur client libraries provide this.

        If using the Conjur `Authorization` header, its value should be set to
        `Token token=<base64-encoded access token>`.

        Note that the body of the request must be the empty string.
      operationId: Authentication_rotateApiKey
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: |
          (**Optional**) role specifier in `{kind}:{identifier}` format

          ##### Permissions required

          `update` privilege on the role whose API key is being rotated.
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
      responses:
        "200":
          $ref: '#/paths/~1authn~1%7Baccount%7D~1login/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "422":
          description: A request parameter was either missing or invalid.
        "500":
          description: "Malfromed request, rejected by the server"
      security:
      - basicAuth: []
        conjurAuth: []
      summary: Rotates a role's API key.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--authn-account-api_key
      x-accepts: application/json
  /{authenticator}/{account}:
    patch:
      description: |
        Allows you to either enable or disable a given authenticator that does not have service_id (For example: authn-gcp).

        When you enable or disable an authenticator via this
        endpoint, the status of the authenticator is stored
        in the Conjur database. The enablement status of the authenticator
        service may be overridden by setting the `CONJUR_AUTHENTICATORS`
        environment variable on the Conjur server; in the case where this
        environment variable is set, the database record of whether the
        authenticator service is enabled will be ignored.

        **This endpoint is part of an early implementation of support for enabling Conjur
        authenticators via the API, and is currently available at the Community
        (or early alpha) level. This endpoint is still subject to breaking
        changes in the future.**
      operationId: Authentication_toggleAuthenticatorStatus
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: The authenticator to update
        example: authn-gcp
        explode: false
        in: path
        name: authenticator
        required: true
        schema:
          enum:
          - authn-iam
          - authn-oidc
          - authn-ldap
          - authn-k8s
          - authn-gcp
          - authn-azure
          - authn-jwt
          type: string
        style: simple
        x-konfig-original-example: authn-gcp
      - description: Organization account name
        example: dev
        explode: false
        in: path
        name: account
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: dev
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationToggleAuthenticatorStatusRequest'
        description: |
          Contains either `enabled=true` or `enabled=false` to
          enable or disable an authenticator
        required: true
      responses:
        "204":
          description: The config was updated properly
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      summary: Enables or disables authenticator defined without service_id.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-patch--authenticator-account
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /{authenticator}/{service_id}/{account}:
    patch:
      description: |
        Allows you to either enable or disable a given authenticator
        service instance.

        When you enable or disable an authenticator service instance via this
        endpoint, the status of the authenticator service instance is stored
        in the Conjur database. The enablement status of the authenticator
        service instance may be overridden by setting the `CONJUR_AUTHENTICATORS`
        environment variable on the Conjur server; in the case where this
        environment variable is set, the database record of whether the
        authenticator service instance is enabled will be ignored.

        **This endpoint is part of an early implementation of support for enabling Conjur
        authenticators via the API, and is currently available at the Community
        (or early alpha) level. This endpoint is still subject to breaking
        changes in the future.**
      operationId: Authentication_toggleAuthenticatorInstanceStatus
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: The authenticator to update
        example: authn-oidc
        explode: false
        in: path
        name: authenticator
        required: true
        schema:
          $ref: '#/paths/~1%7Bauthenticator%7D~1%7Baccount%7D/patch/parameters/0/schema'
        style: simple
        x-konfig-original-example: authn-oidc
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: Organization account name
        example: dev
        explode: false
        in: path
        name: account
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: dev
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1%7Bauthenticator%7D~1%7Baccount%7D/patch/requestBody/content/application~1x-www-form-urlencoded/schema'
        description: |
          Contains either `enabled=true` or `enabled=false` to
          enable or disable an authenticator
        required: true
      responses:
        "204":
          description: The config was updated properly
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "500":
          description: "Malfromed request, rejected by the server"
      summary: Enables or disables authenticator service instances.
      tags:
      - authentication
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-patch--authenticator-service_id-account
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /whoami:
    get:
      description: |
        WhoAmI provides information about the client making an API request.
        It can be used to help troubleshoot configuration by verifying authentication
        and the client IP address for audit and network access restrictions.
        For more information, see Host Attributes.
      operationId: Status_getClientInfo
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusGetClientInfoResponse'
          description: Details about the client making the request
        "401":
          description: Authentication information is missing or invalid
      summary: Provides information about the client making an API request.
      tags:
      - status
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--whoami
      x-accepts: application/json
  /{authenticator}/{service_id}/{account}/status:
    get:
      description: |
        Once the status webservice has been properly configured and the relevant user
        groups have been given permissions to access the status webservice, the
        users in those groups can check the status of the authenticator.

        Supported Authenticators:
          - Azure
          - OIDC

        Not Supported:
          - AWS IAM
          - Kubernetes
          - LDAP

        See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm)
        for details on setting up the authenticator status webservice.
      operationId: Status_checkAuthenticatorConfiguration
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: The type of authenticator
        example: authn-oidc
        explode: false
        in: path
        name: authenticator
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: authn-oidc
      - description: URL-Encoded authenticator service ID
        example: prod%2fgke
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: prod%2fgke
      - description: The organization account name
        example: dev
        explode: false
        in: path
        name: account
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: dev
      responses:
        "200":
          $ref: '#/paths/~1authn-gcp~1%7Baccount%7D~1status/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: The service was not found
        "500":
          $ref: '#/paths/~1authn-gcp~1%7Baccount%7D~1status/get/responses/200'
        "501":
          $ref: '#/paths/~1authn-gcp~1%7Baccount%7D~1status/get/responses/200'
      summary: Details whether an authentication service has been configured properly
      tags:
      - status
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--authenticator-service_id-account-status
      x-accepts: application/json
  /authn-gcp/{account}/status:
    get:
      description: |
        Once the status webservice has been properly configured and the relevant user
        groups have been given permissions to access the status webservice, the
        users in those groups can check the status of the authenticator.

        This operation only supports the GCP authenticator

        See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm)
        for details on setting up the authenticator status webservice.
      operationId: Status_checkAuthenticatorStatus
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: The organization account name
        example: dev
        explode: false
        in: path
        name: account
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: dev
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCheckAuthenticatorConfigurationResponse'
          description: The response contains info about the result
          x-do-not-generate: true
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: The service was not found
        "500":
          $ref: '#/paths/~1authn-gcp~1%7Baccount%7D~1status/get/responses/200'
        "501":
          $ref: '#/paths/~1authn-gcp~1%7Baccount%7D~1status/get/responses/200'
      summary: Details whether an authentication service has been configured properly
      tags:
      - status
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--authn-gcp-account-status
      x-accepts: application/json
  /authenticators:
    get:
      description: |
        Response contains three members: installed, configured, and enabled.

        installed: The authenticator is implemented in Conjur and is available for configuration
        configured: The authenticator has a webservice in the DB that was loaded by policy
        enabled: The authenticator is enabled (in the DB or in the ENV) and is ready for authentication
      operationId: Status_authenticatorDetails
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAuthenticatorDetailsResponse'
          description: Details about authenticators for this Conjur server
      summary: Details about which authenticators are on the Conjur Server
      tags:
      - status
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--authenticators
      x-accepts: application/json
  /health:
    get:
      description: |
        You can request health checks against any cluster node using the Conjur API.
        These routes do not require authentication.

        The health check attempts an internal HTTP or TCP connection to
        each Conjur Enterprise service. It also attempts a simple transaction against all internal databases.
      operationId: Status_checkConjurHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCheckConjurHealthResponse'
          description: The tests were successful
        "502":
          description: The tests failed
      summary: Health info about conjur
      tags:
      - status
      x-conjur-settings:
        enterprise-only: true
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--health
      x-accepts: application/json
    x-conjur-settings:
      enterprise-only: true
  /remote_health/{remote}:
    get:
      description: |
        Use the remote_health route to check the health of any Conjur Enterprise Server from any other Conjur Enterprise Server.
        With this route, you can check master health relative to a follower, or follower health relative
        to a standby, and so on.
      operationId: Status_checkRemoteHealth
      parameters:
      - description: The hostname of the remote to check
        example: conjur.myorg.com
        explode: false
        in: path
        name: remote
        required: true
        schema:
          type: string
        style: simple
        x-konfig-original-example: conjur.myorg.com
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCheckRemoteHealthResponse'
          description: The tests were successful
        "502":
          description: The tests failed
      summary: Health info about a given Conjur Enterprise server
      tags:
      - status
      x-conjur-settings:
        enterprise-only: true
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--remote_health-remote
      x-accepts: application/json
    x-conjur-settings:
      enterprise-only: true
  /info:
    get:
      description: |
        Information about the Conjur Enterprise node which was queried against.

        Includes authenticator info, release/version info, configuration details,
        internal services, and role information.
      operationId: Status_conjurServerInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusConjurServerInfoResponse'
          description: info
      summary: Basic information about the Conjur Enterprise server
      tags:
      - status
      x-conjur-settings:
        enterprise-only: true
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--info
      x-accepts: application/json
    x-conjur-settings:
      enterprise-only: true
  /secrets/{account}/{kind}/{identifier}:
    get:
      description: |
        Fetches the value of a secret from the specified Secret. The latest version
        will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.

        The secret data is returned in the response body.

        Note: Conjur will allow you to add a secret to any resource, but the best practice is to store
        and retrieve secret data only using Secret resources.
      operationId: Secrets_getSecretValue
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource - in almost all cases this should be `variable`
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
      - description: URL-encoded variable ID
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
      - description: (**Optional**) Version you want to retrieve (Conjur keeps the
          last 20 versions of a secret)
        explode: true
        in: query
        name: version
        required: false
        schema:
          $ref: '#/components/schemas/ResourceVersion'
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecretsGetSecretValueResponse'
          description: The secret value was added successfully
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Fetches the value of a secret from the specified Secret.
      tags:
      - secrets
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--secrets-account-kind-identifier
      x-accepts: text/plain
    post:
      description: |
        Creates a secret value within the specified Secret.


        Note: Conjur will allow you to add a secret to any resource, but the
        best practice is to store and retrieve secret data only using Secret resources.
      operationId: Secrets_createSecretValue
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource - in almost all cases this should be `variable`
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
      - description: URL-encoded variable ID
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
      - description: Tells the server to reset the variables expiration date
        explode: true
        in: query
        name: expirations
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/SecretsCreateSecretValueRequest'
        description: Secret data
        required: false
      responses:
        "201":
          description: The secret value was added successfully
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "422":
          description: A request parameter was either missing or invalid.
      summary: Creates a secret value within the specified variable.
      tags:
      - secrets
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/octet-stream
      x-accepts: application/json
  /secrets:
    get:
      description: Fetches multiple secret values in one invocation. It’s faster to
        fetch secrets in batches than to fetch them one at a time.
      operationId: Secrets_getMultipleValues
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: "Comma-delimited, URL-encoded resource IDs of the variables."
        explode: true
        in: query
        name: variable_ids
        required: true
        schema:
          description: |
            Comma-delimited, URL-encoded resource identifiers.

            ##### Resources IDs encoding:

            - `myapp-01` -> `myapp-01` (unchanged)
            - `alice@devops` -> `alice%40devops`
            - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`
            - `research+development` -> `research%2Bdevelopment`
            - `sales&marketing` -> `sales%26marketing`
          example: "myorg:variable:secret1,myorg:variable:secret1"
          type: string
          x-konfig-original-example: "myorg:variable:secret1,myorg:variable:secret1"
          x-konfig-generated-schema: konfig-generated-schema-paths--secrets-get-parameters-0-schema
        style: form
      - description: Set the encoding of the response object
        explode: false
        in: header
        name: Accept-Encoding
        required: false
        schema:
          enum:
          - base64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsGetMultipleValuesResponse'
          description: The batch secret values
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: At least one resource was unable to be found
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsGetMultipleValues406Response'
          description: Issue encoding secret into JSON format
          x-do-not-generate: true
        "422":
          description: A request parameter was either missing or invalid.
      summary: Fetch multiple secrets
      tags:
      - secrets
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--secrets
      x-accepts: application/json
  /policies/{account}/policy/{identifier}:
    patch:
      description: |
        Modifies an existing Conjur policy. Data may be explicitly deleted using
        the `!delete`, `!revoke`, and `!deny` statements. Unlike `replace` mode,
        no data is ever implicitly deleted.

        ##### Permissions required
      operationId: Policies_modifyPolicy
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: ID of the policy to update
        example: root
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: root
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          text/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          application/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          text/plain:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
        description: Policy
        required: true
      responses:
        "201":
          $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/responses/201'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "409":
          description: "Similar operation already in progress, retry after a delay"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Modifies an existing Conjur policy.
      tags:
      - policies
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/yaml
      x-accepts: application/json
    post:
      description: |
        Adds data to the existing Conjur policy. Deletions are not allowed.
        Any policy objects that exist on the server but are omitted from the
        policy file will not be deleted and any explicit deletions in the policy file will result in an error.

        ##### Permissions required

        `create` privilege on the policy."
      operationId: Policies_addDataToExistingPolicy
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: ID of the policy to update
        example: root
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: root
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          text/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          application/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          text/plain:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
        description: Policy
        required: true
      responses:
        "201":
          $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/responses/201'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "409":
          description: "Similar operation already in progress, retry after a delay"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Adds data to the existing Conjur policy.
      tags:
      - policies
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/yaml
      x-accepts: application/json
    put:
      description: |
        Loads or replaces a Conjur policy document.

        **Any policy data which already exists on the server but is not
        explicitly specified in the new policy file will be deleted!**.
      operationId: Policies_putPolicyDocument
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: ID of the policy to load (root if no root policy has been loaded
          yet)
        example: root
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: root
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/components/schemas/PoliciesPutPolicyDocumentRequest'
          text/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          application/x-yaml:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
          text/plain:
            schema:
              $ref: '#/paths/~1policies~1%7Baccount%7D~1policy~1%7Bidentifier%7D/put/requestBody/content/text~1yaml/schema'
        description: Policy
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesModifyPolicyResponse'
          description: Decsribes new data created by a successful policy load
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "409":
          description: "Similar operation already in progress, retry after a delay"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Loads or replaces a Conjur policy document.
      tags:
      - policies
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: text/yaml
      x-accepts: application/json
  /roles/{account}/{kind}/{identifier}:
    delete:
      description: |
        Deletes an existing role membership.

        If a role A is granted to a role B, then role A is said to have role B as a member.
        These relationships are described in the “members” portion of the returned JSON.

        When the `members` query parameter is provided, you will get the members of a role.

        When the `members` and `member` query parameters are provided, the role specfified by
        `member` will be removed as a member of the role specified in the endpoint URI.
      operationId: Roles_deleteRoleMembership
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: ID of the role for which to get the information about
        example: admin
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: admin
      - description: Returns a list of the Role's members.
        explode: true
        in: query
        name: members
        required: true
        schema:
          type: string
        style: form
      - description: The identifier of the Role to be added as a member.
        explode: true
        in: query
        name: member
        required: true
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
      responses:
        "204":
          description: Member was deleted from role successfully
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Deletes an existing role membership
      tags:
      - roles
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--roles-account-kind-identifier
      x-accepts: application/json
    get:
      description: |
        Gets detailed information about a specific role, including the role members.

        If a role A is granted to a role B, then role A is said to have role B as a member.
        These relationships are described in the “members” portion of the returned JSON.

        ##### Listing members

        If `members` is provided, you will get the members of a role.

        If a `kind` query parameter is given, narrows results to only resources of that kind.

        If a `limit` is given, returns no more than that number of results. Providing an `offset`
        skips a number of resources before returning the rest. In addition, providing an `offset`
        will give limit a default value of 10 if none other is provided. These two parameters
        can be combined to page through results.

        If the parameter `count` is true, returns only the number of items in the list.

        ##### Text search

        If the search parameter is provided, narrows results to those pertaining to the search query.
        Search works across resource IDs and the values of annotations. It weights results so that
        those with matching id or a matching value of an annotation called name appear first, then
        those with another matching annotation value, and finally those with a matching kind.

        ##### Parameter Priority

        If Conjur is given any combination of optional parameters, it responds with ONLY results
        for the parameter of the highest priority.

        1. `graph`
        2. `all`
        3. `memberships`
        4. `members`
      operationId: Roles_getRoleInformation
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: ID of the role for which to get the information about
        example: admin
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: admin
      - description: "Returns an array of Role IDs representing all role memberships,\
          \ expanded recursively."
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      - description: Returns all direct role memberships (members not expanded recursively).
        explode: true
        in: query
        name: memberships
        required: false
        schema:
          type: string
        style: form
      - description: Returns a list of the Role's members.
        explode: true
        in: query
        name: members
        required: false
        schema:
          type: string
        style: form
      - description: "When listing members, start at this item number."
        explode: true
        in: query
        name: offset
        required: false
        schema:
          $ref: '#/components/schemas/Offset'
        style: form
      - description: "When listing members, return up to this many results."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
        style: form
      - description: "When listing members, if `true`, return only the count of members."
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: "When listing members, the results will be narrowed to only those\
          \ matching the provided string"
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: user
          minLength: 1
          type: string
          x-konfig-original-example: user
          x-konfig-generated-schema: konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-9-schema
        style: form
      - description: If included in the query returns a graph view of the role
        explode: true
        in: query
        name: graph
        required: false
        schema:
          example: ""
          type: string
          x-konfig-original-example: ""
          x-konfig-generated-schema: konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-10-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesGetRoleInformationResponse'
          description: The response body contains the requested role(s)/member(s)
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Get role information
      tags:
      - roles
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--roles-account-kind-identifier
      x-accepts: application/json
    post:
      description: |
        Updates or modifies an existing role membership.

        If a role A is granted to a role B, then role A is said to have role B as a member.
        These relationships are described in the “members” portion of the returned JSON.

        When the `members` query parameter is provided, you will get the members of a role.

        When the `members` and `member` query parameters are provided, the role specfified by
        `member` will be added as a member of the role specified in the endpoint URI.
      operationId: Roles_updateRoleMembership
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: ID of the role for which to get the information about
        example: admin
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: admin
      - description: Returns a list of the Role's members.
        explode: true
        in: query
        name: members
        required: true
        schema:
          type: string
        style: form
      - description: The identifier of the Role to be added as a member.
        explode: true
        in: query
        name: member
        required: true
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
      responses:
        "204":
          description: Member was added to role successfully
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Update or modify an existing role membership
      tags:
      - roles
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--roles-account-kind-identifier
      x-accepts: application/json
  /resources:
    get:
      description: |
        Lists resources within an organization account.

        In the absence of an `account` query parameter, shows results for the account of the authorization token user.

        If an `account` query parameter is given, shows results for the specified account.

        If a `kind` query parameter is given, narrows results to only resources of that kind.

        If a `limit` is given, returns no more than that number of results. Providing an `offset`
        skips a number of resources before returning the rest. In addition, providing an `offset`
        will give `limit` a default value of 10 if none other is provided. These two parameters can
        be combined to page through results.

        If the parameter `count` is `true`, returns only the number of items in the list.

        ##### Text search

        If the `search` parameter is provided, narrows results to those pertaining to the search query.
        Search works across resource IDs and the values of annotations. It weighs results so that those
        with matching id or a matching value of an annotation called `name` appear first, then those with
        another matching annotation value, and finally those with a matching  `kind`."
      operationId: Resources_list
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        example: myorg
        explode: true
        in: query
        name: account
        required: false
        schema:
          $ref: '#/components/schemas/AccountName'
        style: form
        x-konfig-original-example: myorg
      - description: Type of resource
        example: user
        explode: true
        in: query
        name: kind
        required: false
        schema:
          $ref: '#/components/schemas/Kind'
        style: form
        x-konfig-original-example: user
      - description: Filter resources based on this value by name
        example: db
        explode: true
        in: query
        name: search
        required: false
        schema:
          description: Only returns results that contain this string value
          example: password
          minLength: 1
          type: string
          x-konfig-original-example: password
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-get-parameters-2-schema
        style: form
        x-konfig-original-example: db
      - description: "When listing resources, start at this item number."
        explode: true
        in: query
        name: offset
        required: false
        schema:
          $ref: '#/components/schemas/Offset'
        style: form
      - description: "When listing resources, return up to this many results."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
        style: form
      - description: "When listing resources, if `true`, return only the count of\
          \ the results."
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: acting_as
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesListResponse'
          description: The response body contains a list of resources
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "422":
          description: A request parameter was either missing or invalid.
      summary: Lists resources within an organization account.
      tags:
      - resources
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--resources
      x-accepts: application/json
  /resources/{account}:
    get:
      description: |
        Lists resources within an organization account.

        If a `kind` query parameter is given, narrows results to only resources of that kind.

        If a `limit` is given, returns no more than that number of results. Providing an `offset`
        skips a number of resources before returning the rest. In addition, providing an `offset`
        will give `limit` a default value of 10 if none other is provided. These two parameters
        can be combined to page through results.

        If the parameter `count` is `true`, returns only the number of items in the list.

        ##### Text search

        If the `search` parameter is provided, narrows results to those pertaining to the search query.
        Search works across resource IDs and the values of annotations. It weighs results so that those
        with matching id or a matching value of an annotation called `name` appear first, then those with
        another matching annotation value, and finally those with a matching  `kind`.
      operationId: Resources_listResources
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: true
        in: query
        name: kind
        required: false
        schema:
          $ref: '#/components/schemas/Kind'
        style: form
        x-konfig-original-example: user
      - description: Filter resources based on this value by name
        example: db
        explode: true
        in: query
        name: search
        required: false
        schema:
          $ref: '#/paths/~1resources/get/parameters/2/schema'
        style: form
        x-konfig-original-example: db
      - description: "When listing resources, start at this item number."
        explode: true
        in: query
        name: offset
        required: false
        schema:
          $ref: '#/components/schemas/Offset'
        style: form
      - description: "When listing resources, return up to this many results."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
        style: form
      - description: "When listing resources, if `true`, return only the count of\
          \ the results."
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: acting_as
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      responses:
        "200":
          $ref: '#/paths/~1resources/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "422":
          description: A request parameter was either missing or invalid.
      summary: Lists resources within an organization account.
      tags:
      - resources
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--resources-account
      x-accepts: application/json
  /resources/{account}/{kind}:
    get:
      description: |
        Lists resources of the same kind within an organization account.

        Kinds of resources include: policy, user, host, group, layer, or variable

        If a `limit` is given, returns no more than that number of results.
        Providing an `offset` skips a number of resources before returning the rest.
        In addition, providing an `offset` will give `limit` a default value of 10 if
        none other is provided. These two parameters can be combined to page through results.

        If the parameter `count` is `true`, returns only the number of items in the list.

        ##### Text search

        If the `search` parameter is provided, narrows results to those pertaining to the search query.
        Search works across resource IDs and the values of annotations. It weighs results so that those
        with matching id or a matching value of an annotation called `name` appear first, then those with
        another matching annotation value, and finally those with a matching  `kind`.
      operationId: Resources_listResourcesForKind
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: Filter resources based on this value by name
        example: db
        explode: true
        in: query
        name: search
        required: false
        schema:
          $ref: '#/paths/~1resources/get/parameters/2/schema'
        style: form
        x-konfig-original-example: db
      - description: "When listing resources, start at this item number."
        explode: true
        in: query
        name: offset
        required: false
        schema:
          $ref: '#/components/schemas/Offset'
        style: form
      - description: "When listing resources, return up to this many results."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
        style: form
      - description: "When listing resources, if `true`, return only the count of\
          \ the results."
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      - description: Retrieves the resources list for a different role if the authenticated
          role has access
        example: myorg:host:host1
        explode: true
        in: query
        name: acting_as
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      responses:
        "200":
          $ref: '#/paths/~1resources/get/responses/200'
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "422":
          description: A request parameter was either missing or invalid.
      summary: Lists resources of the same kind within an organization account.
      tags:
      - resources
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--resources-account-kind
      x-accepts: application/json
  /resources/{account}/{kind}/{identifier}:
    get:
      description: |
        Details about a single resource.

        If `permitted_roles` and `privilege` are given, Conjur lists the
        roles with the specified privilege on the resource.

        If `check`, `privilege` and `role` are given, Conjur checks if the
        specified role has the privilege on the resource.

        If `permitted_roles` and `check` are both given, Conjur responds to the `check` call ONLY.

        ##### Permissions Required
      operationId: Resources_showResourceDetails
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: ID of the resource for which to get the information about
        example: conjur/authn-iam/test
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: conjur/authn-iam/test
      - description: Lists the roles which have the named privilege on a resource.
        explode: true
        in: query
        name: permitted_roles
        required: false
        schema:
          example: true
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-3-schema
        style: form
      - description: Level of privilege to filter on. Can only be used in combination
          with `permitted_roles` or `check` parameter.
        explode: true
        in: query
        name: privilege
        required: false
        schema:
          description: Denotes a type of permission allowed on a resource
          example: execute
          minLength: 1
          type: string
          x-konfig-original-example: execute
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-4-schema
        style: form
      - description: Check whether a role has a privilege on a resource.
        explode: true
        in: query
        name: check
        required: false
        schema:
          description: Checks whether a role has a privilege on a resource.
          example: true
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-5-schema
        style: form
      - description: Role to check privilege on. Can only be used in combination with
          `check` parameter.
        example: myorg:host:host1
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/RoleType'
        style: form
        x-konfig-original-example: myorg:host:host1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesShowResourceDetailsResponse'
          description: The response body contains the list of role memberships or
            permitted roles
        "204":
          description: Permissions check was successful
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Shows a description of a single resource.
      tags:
      - resources
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--resources-account-kind-identifier
      x-accepts: application/json
  /host_factory_tokens:
    post:
      description: |
        Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.

        If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.

        ##### Permissions required
        #
        `execute` privilege on the Host Factory."
      operationId: HostFactory_createHostIdentityTokens
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostFactoryCreateHostIdentityTokensRequest'
        description: Parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostFactoryCreateHostIdentityTokensResponse'
          description: Zero or more tokens were created and delivered in the response
            body
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: The authenticated user lacks the necessary privileges
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
      summary: Creates one or more host identity tokens.
      tags:
      - host factory
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--host_factory_tokens
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /host_factory_tokens/{token}:
    delete:
      description: |
        Revokes a token, immediately disabling it.

        ##### Permissions required

        `update` privilege on the host factory."
      operationId: HostFactory_revokeToken
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: The host factory token to revoke
        explode: false
        in: path
        name: token
        required: true
        schema:
          example: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
          type: string
          x-konfig-original-example: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
          x-konfig-generated-schema: konfig-generated-schema-paths--host_factory_tokens-token-delete-parameters-0-schema
        style: simple
      responses:
        "204":
          description: Token was successfully revoked
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
      summary: "Revokes a token, immediately disabling it."
      tags:
      - host factory
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--host_factory_tokens-token
      x-accepts: application/json
  /host_factories/hosts:
    post:
      description: |
        Creates a Host using the Host Factory and returns a JSON description of it.

        Requires a host factory token, which can be created using the create tokens API.
        In practice, this token is usually provided automatically as part of Conjur integration with your
        host provisioning infrastructure.

        Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address.
      operationId: HostFactory_createHost
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostFactoryCreateHostRequest'
        description: Parameters
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostFactoryCreateHostResponse'
          description: The response body contains the newly-created host
        "401":
          description: Authentication information is missing or invalid
        "422":
          description: A request parameter was either missing or invalid.
      summary: Creates a Host using the Host Factory.
      tags:
      - host factory
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--host_factories-hosts
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /public_keys/{account}/{kind}/{identifier}:
    get:
      description: |
        Shows all public keys for a resource as newline delimited string for compatibility with the authorized_keys SSH format.
        Returns an empty string if the resource does not exist, to prevent attackers from determining whether a resource exists.
      operationId: PublicKeys_showAllForResource
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Type of resource
        example: user
        explode: false
        in: path
        name: kind
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
        style: simple
        x-konfig-original-example: user
      - description: ID of the resource for which to get the information about
        example: admin
        explode: false
        in: path
        name: identifier
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
        style: simple
        x-konfig-original-example: admin
      responses:
        "200":
          content:
            text/plain:
              example: |
                ssh-rsa AAAAB3Nzabc2 admin@alice.com

                ssh-rsa AAAAB3Nza3nx alice@example.com
              schema:
                $ref: '#/components/schemas/PublicKeysShowAllForResourceResponse'
              x-konfig-original-example: |
                ssh-rsa AAAAB3Nzabc2 admin@alice.com

                ssh-rsa AAAAB3Nza3nx alice@example.com
          description: Public keys for a resource as newline delimited string for
            compatibility with the authorized_keys SSH format. Empty string if the
            resource does not exist
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "404":
          description: "The requested resource does not exist, the authenticated user\
            \ lacks the required privileges to enumerate this resource, or its value\
            \ has not been set"
        "422":
          description: A request parameter was either missing or invalid.
        "500":
          description: "Malfromed request, rejected by the server"
      summary: Shows all public keys for a resource.
      tags:
      - public keys
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--public_keys-account-kind-identifier
      x-accepts: text/plain
  /ca/{account}/{service_id}/sign:
    post:
      description: |
        Gets a signed certificate from the configured Certificate Authority service.

        The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.

        *** IMPORTANT ***
        This endpoint is part of an early implementation of support for using Conjur as a certificate
        authority, and is currently available at the Community (or early alpha) level.
        This endpoint is still subject to breaking changes in the future.
      operationId: CertificateAuthority_getSignedCertificate
      parameters:
      - description: |
          Add an ID to the request being made so it can be tracked in Conjur.
          If not provided the server will automatically generate one.
        example: test-id
        explode: false
        in: header
        name: X-Request-Id
        required: false
        schema:
          pattern: "^[a-zA-Z\\d-]{1,255}$"
          type: string
        style: simple
        x-konfig-original-example: test-id
      - description: Organization account name
        explode: false
        in: path
        name: account
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
        style: simple
      - description: Name of the Certificate Authority service
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          example: ca-service
          minLength: 1
          type: string
          x-konfig-original-example: ca-service
          x-konfig-generated-schema: konfig-generated-schema-paths--ca-account-service_id-sign-post-parameters-1-schema
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CertificateAuthorityGetSignedCertificateRequest'
        description: Client Certificate Signing Request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateAuthorityGetSignedCertificateResponse'
            application/x-pem-file:
              schema:
                $ref: '#/components/schemas/CertificateAuthorityGetSignedCertificate201Response'
          description: The response body is the newly signed certificate
        "400":
          description: The server cannot process the request due to malformed request
            syntax
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: "Either          \n- The authenticated role is not a Host role,\n\
            - The authenticated Host does not have `sign` privilege for the CA service,\
            \ or\n- The authenticated Host ID does not match the of the CSR Common\
            \ Name (CN).\n"
        "404":
          description: CA Service with the given ID does not exist
      summary: Gets a signed certificate from the configured Certificate Authority
        service.
      tags:
      - certificate authority
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--ca-account-service_id-sign
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
components:
  parameters:
    ServiceID:
      description: URL-Encoded authenticator service ID
      example: prod%2fgke
      explode: false
      in: path
      name: service_id
      required: true
      schema:
        type: string
      style: simple
      x-konfig-original-example: prod%2fgke
    RequestID:
      description: |
        Add an ID to the request being made so it can be tracked in Conjur.
        If not provided the server will automatically generate one.
      example: test-id
      explode: false
      in: header
      name: X-Request-Id
      required: false
      schema:
        pattern: "^[a-zA-Z\\d-]{1,255}$"
        type: string
      style: simple
      x-konfig-original-example: test-id
  responses:
    BadRequest:
      description: The server cannot process the request due to malformed request
        syntax
    Busy:
      description: "Similar operation already in progress, retry after a delay"
    InadequatePrivileges:
      description: The authenticated user lacks the necessary privileges
    InternalServerError:
      description: "Malfromed request, rejected by the server"
    ResourceNotFound:
      description: "The requested resource does not exist, the authenticated user\
        \ lacks the required privileges to enumerate this resource, or its value has\
        \ not been set"
    ResourcesNotFound:
      description: At least one resource was unable to be found
    UnauthorizedError:
      description: Authentication information is missing or invalid
    UnprocessableEntity:
      description: A request parameter was either missing or invalid.
  schemas:
    AccountName:
      description: Conjur account name
      example: default
      minLength: 1
      type: string
      x-konfig-original-example: default
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AccountName
    Count:
      description: Return only the count of results
      example: true
      type: boolean
      x-konfig-original-example: true
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Count
    Kind:
      example: variable
      minLength: 1
      type: string
      x-konfig-original-example: variable
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Kind
    Limit:
      description: Return no more than this number of results
      example: 10
      type: integer
      x-konfig-original-example: 10
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Limit
    Offset:
      description: Skips this many items before returning the rest
      example: 20
      type: integer
      x-konfig-original-example: 20
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Offset
    ResourceID:
      description: |
        Resource identifier. Requires to be encoded when in path.

        ##### Examples:

        - `myapp-01` -> `myapp-01` (unchanged)
        - `alice@devops` -> `alice%40devops`
        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`
        - `research+development` -> `research%2Bdevelopment`
        - `sales&marketing` -> `sales%26marketing`
      example: prod%2Faws%2Fdb-password
      minLength: 1
      type: string
      x-konfig-original-example: prod%2Faws%2Fdb-password
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourceID
    ResourceVersion:
      description: Version of the resource (Conjur keeps the last 20 versions of a
        secret)
      example: 1
      type: integer
      x-konfig-original-example: 1
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourceVersion
    RoleType:
      description: |
        ##### Kinds of roles:

        - User: one unique wonderful human
        - Host: a single logical machine (in the broad sense, not just physical)
        - Layer: a collection of hosts that have the same privileges
        - Group: a collection of users and groups that have the same privileges
        - Policy: a role which owns of a set of related object

        Any identifier included in the URL must be URL-encoded to be recognized by the Conjur API.

        ##### Resource Identifiers:

        - `myapp-01` -> `myapp-01` (unchanged)
        - `alice@devops` -> `alice%40devops`
        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`
        - `research+development` -> `research%2Bdevelopment`
        - `sales&marketing` -> `sales%26marketing`
      minLength: 1
      type: string
    AuthenticationSendCsrForClientCertInjectionRequest:
      type: string
    AuthenticationObtainAccessTokenRequest:
      description: Example of a Conjur API key
      example: 14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc
      minLength: 55
      type: string
      x-konfig-original-example: 14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationObtainAccessTokenRequest
      x-konfig-is-used-in-successful-response: true
    AuthenticationGetShortLivedTokenRequest:
      description: AWS Signature Version 4 header
      type: string
    AuthenticationAzureAuthenticateRequest:
      description: Azure instance identity token
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationAzureAuthenticateRequest-properties-jwt
      type: object
      x-konfig-original-example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationAzureAuthenticateRequest
    AuthenticationGcpAuthnAuthenticateRequest:
      description: Google Cloud instance identity token
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationGcpAuthnAuthenticateRequest-properties-jwt
      type: object
      x-konfig-original-example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationGcpAuthnAuthenticateRequest
    AuthenticationOidcAuthenticateRequest:
      description: OpenID Connect ID token
      example:
        id_token: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        id_token:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationOidcAuthenticateRequest-properties-id_token
      type: object
      x-konfig-original-example:
        id_token: eyJhbGciOiJSUzI1NiIs......uTonCA
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationOidcAuthenticateRequest
    AuthenticationJwtAuthenticateRequest:
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest-properties-jwt
      type: object
      x-konfig-original-example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest
    AuthenticationChangeUserPasswordRequest:
      format: password
      minLength: 1
      type: string
    AuthenticationToggleAuthenticatorStatusRequest:
      properties:
        enabled:
          type: boolean
      type: object
    SecretsCreateSecretValueRequest:
      type: string
    PoliciesPutPolicyDocumentRequest:
      example: |
        - !policy
          id: database
          body:
          - !host
            id: db-host
          - !variable
            id: db-password
            owner: !host db-host
      minLength: 1
      type: string
      x-konfig-original-example: |
        - !policy
          id: database
          body:
          - !host
            id: db-host
          - !variable
            id: db-password
            owner: !host db-host
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PoliciesPutPolicyDocumentRequest
    HostFactoryCreateHostIdentityTokensRequest:
      example:
        expiration: 2017-08-04T22:27:20+00:00
        host_factory: myorg:hosty_factory:hf-db
      properties:
        expiration:
          description: '`ISO 8601 datetime` denoting a requested expiration time.'
          example: 2017-08-04T22:27:20+00:00
          type: string
          x-konfig-original-example: 2017-08-04T22:27:20+00:00
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-expiration
        host_factory:
          description: Fully qualified host factory ID
          example: myorg:host_factory:hf-db
          type: string
          x-konfig-original-example: myorg:host_factory:hf-db
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-host_factory
        count:
          description: Number of host tokens to create
          example: 2
          type: integer
          x-konfig-original-example: 2
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-count
        cidr:
          description: Number of host tokens to create
          example:
          - 127.0.0.1/32
          items:
            type: string
          type: array
          x-konfig-original-example:
          - 127.0.0.1/32
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-cidr
      required:
      - expiration
      - host_factory
      type: object
      x-konfig-original-example:
        expiration: 2017-08-04T22:27:20+00:00
        host_factory: myorg:hosty_factory:hf-db
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest
    HostFactoryCreateHostRequest:
      example:
        id: new-host
      properties:
        id:
          description: Identifier of the host to be created. It will be created within
            the account of the host factory.
          example: my-new-host
          type: string
          x-konfig-original-example: my-new-host
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-id
        annotations:
          description: Annotations to apply to the new host
          example:
            description: new db host
            puppet: "true"
          type: object
          x-konfig-original-example:
            description: new db host
            puppet: "true"
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-annotations
      required:
      - id
      type: object
      x-konfig-original-example:
        id: new-host
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest
    CertificateAuthorityGetSignedCertificateRequest:
      properties:
        csr:
          type: string
        ttl:
          type: string
      required:
      - csr
      - ttl
      type: object
    AuthenticationObtainAccessTokenResponse:
      type: string
      x-konfig-is-used-in-successful-response: true
    StatusGetClientInfoResponse:
      description: Information about the client making a request
      example:
        token_issued_at: 2017-08-04T22:27:20+00:00
        client_ip: 127.0.0.1
        user_agent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36\
          \ (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
        account: dev
        username: admin
      properties:
        client_ip:
          description: The request client IP address as determined by Conjur. This
            same IP address appears in application logs and audit logs.
          example: 127.0.0.1
          type: string
          x-konfig-original-example: 127.0.0.1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-client_ip
        user_agent:
          description: The incoming request HTTP user agent header.
          example: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36\
            \ (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
          type: string
          x-konfig-original-example: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6)\
            \ AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-user_agent
        account:
          description: The account attribute of the client provided access token.
          example: dev
          type: string
          x-konfig-original-example: dev
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-account
        username:
          description: The username attribute of the provided access token.
          example: admin
          type: string
          x-konfig-original-example: admin
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-username
        token_issued_at:
          description: "The issued timestamp, that is, when the provided access token\
            \ was created (iat field in the JWT)"
          example: 2017-08-04T22:27:20+00:00
          type: string
          x-konfig-original-example: 2017-08-04T22:27:20+00:00
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-token_issued_at
      type: object
      x-konfig-is-used-in-successful-response: true
    StatusCheckAuthenticatorConfigurationResponse:
      example:
        error: "#<Errors::Authentication::AuthenticatorNotFound: CONJ00001E Authenticator\
          \ 'authn-oidc' is not implemented in Conjur>"
        status: error
      properties:
        status:
          description: "The status of the endpoint, 'error' if there was an error"
          example: error
          type: string
          x-konfig-original-example: error
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusCheckAuthenticatorConfigurationResponse-properties-status
        error:
          description: The error message if there was an error
          example: "#<Errors::Authentication::AuthenticatorNotFound: CONJ00001E Authenticator\
            \ 'authn-oidc' is not implemented in Conjur>"
          type: string
          x-konfig-original-example: "#<Errors::Authentication::AuthenticatorNotFound:\
            \ CONJ00001E Authenticator 'authn-oidc' is not implemented in Conjur>"
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusCheckAuthenticatorConfigurationResponse-properties-error
      required:
      - status
      type: object
      x-konfig-is-used-in-successful-response: true
      x-konfig-is-used-in-non-successful-response: true
    StatusAuthenticatorDetailsResponse:
      example:
        configured:
        - authn
        installed:
        - authn
        enabled:
        - authn
      properties:
        installed:
          description: The authenticators installed on the Conjur server
          example:
          - authn
          items:
            type: string
          type: array
          x-konfig-original-example:
          - authn
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-installed
        configured:
          description: The authenticators configured on the Conjur server
          example:
          - authn
          items:
            type: string
          type: array
          x-konfig-original-example:
          - authn
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-configured
        enabled:
          description: The authenticators enabled on the Conjur server
          example:
          - authn
          items:
            type: string
          type: array
          x-konfig-original-example:
          - authn
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-enabled
      type: object
      x-konfig-is-used-in-successful-response: true
    StatusCheckConjurHealthResponse:
      example: {}
      properties: {}
      type: object
      x-konfig-original-example: {}
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusCheckConjurHealthResponse
      x-konfig-is-used-in-successful-response: true
    StatusCheckRemoteHealthResponse:
      example: {}
      properties: {}
      type: object
      x-konfig-original-example: {}
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-StatusCheckRemoteHealthResponse
      x-konfig-is-used-in-successful-response: true
    StatusConjurServerInfoResponse:
      example:
        container: container
        role: role
        configuration: "{}"
        release: release
        authenticators:
          configured:
          - configured
          - configured
          installed:
          - installed
          - installed
          enabled:
          - enabled
          - enabled
        services: "{}"
        version: version
      properties:
        version:
          type: string
        authenticators:
          $ref: '#/components/schemas/StatusConjurServerInfoResponse_authenticators'
        configuration:
          type: object
        role:
          type: string
        container:
          type: string
        release:
          type: string
        services:
          type: object
      type: object
      x-konfig-is-used-in-successful-response: true
    SecretsGetSecretValueResponse:
      example: supersecret
      type: string
      x-konfig-original-example: supersecret
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-SecretsGetSecretValueResponse
      x-konfig-is-used-in-successful-response: true
    SecretsGetMultipleValuesResponse:
      example:
        myorg:variable:secret1: secret1Value
        myorg:variable:secret2: secret2Value
      type: object
      x-konfig-original-example:
        myorg:variable:secret1: secret1Value
        myorg:variable:secret2: secret2Value
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-SecretsGetMultipleValuesResponse
      x-konfig-is-used-in-successful-response: true
    SecretsGetMultipleValues406Response:
      example: {}
      properties: {}
      type: object
      x-konfig-original-example: {}
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-SecretsGetMultipleValues406Response
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    PoliciesModifyPolicyResponse:
      example:
        version: 1
        created_roles:
          myorg:host:database/db-host:
            id: myorg:host:database/db-host
            api_key: 309yzpa1n5kp932waxw6d37x4hew2x8ve8w11m8xn92acfy672m929en
      properties:
        version:
          example: 1
          type: number
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PoliciesModifyPolicyResponse-properties-version
        created_roles:
          type: object
      type: object
      x-konfig-original-example:
        version: 1
        created_roles:
          myorg:host:database/db-host:
            id: myorg:host:database/db-host
            api_key: 309yzpa1n5kp932waxw6d37x4hew2x8ve8w11m8xn92acfy672m929en
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PoliciesModifyPolicyResponse
      x-konfig-is-used-in-successful-response: true
    RolesGetRoleInformationResponse:
      example:
        created_at: 2020-12-31:12:34:56.789+00:00
        id: myorg:user:admin
        members: []
      type: object
      x-konfig-original-example:
        created_at: 2020-12-31:12:34:56.789+00:00
        id: myorg:user:admin
        members: []
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-RolesGetRoleInformationResponse
      x-konfig-is-used-in-successful-response: true
    ResourcesListResponse:
      example:
      - annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/test
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      items:
        $ref: '#/paths/~1resources~1%7Baccount%7D~1%7Bkind%7D~1%7Bidentifier%7D/get/responses/200/content/application~1json/schema'
      type: array
      x-konfig-original-example:
      - annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/test
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesListResponse
      x-konfig-is-used-in-successful-response: true
    ResourcesShowResourceDetailsResponse:
      example:
        annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/testX
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      properties:
        created_at:
          example: 2021-03-23T16:37:14.455+00:00
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-created_at
        id:
          example: dev:policy:conjur/authn-ldap/testX
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-id
        owner:
          example: dev:user:admin
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-owner
        permissions:
          items:
            $ref: '#/components/schemas/ResourcesShowResourceDetailsResponse_permissions_inner'
          type: array
        policy:
          example: dev:policy:root
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy
        annotations:
          items:
            type: string
          type: array
        secrets:
          items:
            $ref: '#/components/schemas/ResourcesShowResourceDetailsResponse_secrets_inner'
          type: array
        restricted_to:
          items:
            type: string
          type: array
        policy_versions:
          items:
            $ref: '#/components/schemas/ResourcesShowResourceDetailsResponse_policy_versions_inner'
          type: array
      type: object
      x-konfig-original-example:
        annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/testX
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse
      x-konfig-is-used-in-successful-response: true
    HostFactoryCreateHostIdentityTokensResponse:
      example:
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 281s2ag1g8s7gd2ezf6td3d619b52t9gaak3w8rj0p38124n384sq7x
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
      items:
        $ref: '#/components/schemas/HostFactoryCreateHostIdentityTokensResponse_inner'
      type: array
      x-konfig-original-example:
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 281s2ag1g8s7gd2ezf6td3d619b52t9gaak3w8rj0p38124n384sq7x
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensResponse
      x-konfig-is-used-in-successful-response: true
    HostFactoryCreateHostResponse:
      description: Contains information about a created host
      example:
        created_at: 2017-08-07T22:30:00.145+00:00
        id: myorg:host:brand-new-host
        owner: myorg:host_factory:hf-db
        permissions: []
        annotations: []
        api_key: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
      properties:
        created_at:
          example: 2017-08-07T22:30:00.145+00:00
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-created_at
        id:
          example: myorg:host:brand-new-host
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-id
        owner:
          example: myorg:host_factory:hf-db
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-owner
        permissions:
          items:
            type: string
          type: array
        annotations:
          items:
            type: string
          type: array
        api_key:
          example: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-api_key
      required:
      - annotations
      - api_key
      - created_at
      - id
      - owner
      - permissions
      type: object
      x-konfig-original-example:
        created_at: 2017-08-07T22:30:00.145+00:00
        id: myorg:host:brand-new-host
        owner: myorg:host_factory:hf-db
        permissions: []
        annotations: []
        api_key: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse
      x-konfig-is-used-in-successful-response: true
    PublicKeysShowAllForResourceResponse:
      type: string
      x-konfig-is-used-in-successful-response: true
    CertificateAuthorityGetSignedCertificateResponse:
      example:
        certificate: certificate
      properties:
        certificate:
          type: string
      type: object
      x-konfig-is-used-in-successful-response: true
    CertificateAuthorityGetSignedCertificate201Response:
      format: base64
      type: string
      x-konfig-is-used-in-successful-response: true
    konfig-generated-schema-paths--authn-account-login-authenticate-post-parameters-1-schema:
      example: admin
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-account-login-authenticate-post-parameters-2-schema:
      example: application/json
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-iam-service_id-account-login-authenticate-post-parameters-3-schema:
      example: application/json
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-azure-service_id-account-login-authenticate-post-parameters-3-schema:
      example: application/json
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-k8s-service_id-account-login-authenticate-post-parameters-3-schema:
      example: application/json
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-ldap-service_id-account-login-authenticate-post-parameters-3-schema:
      example: application/json
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--authn-jwt-service_id-account-id-authenticate-post-parameters-1-schema:
      example: SomeUserID
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--secrets-get-parameters-0-schema:
      example: "myorg:variable:secret1,myorg:variable:secret1"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-9-schema:
      example: user
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-10-schema:
      example: ""
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--resources-get-parameters-2-schema:
      example: password
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-3-schema:
      example: true
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-4-schema:
      example: execute
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-5-schema:
      example: true
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-paths--host_factory_tokens-token-delete-parameters-0-schema:
      example: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--ca-account-service_id-sign-post-parameters-1-schema:
      example: ca-service
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AccountName:
      example: default
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Count:
      example: true
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Kind:
      example: variable
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Limit:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Offset:
      example: 20
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourceID:
      example: prod%2Faws%2Fdb-password
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourceVersion:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationObtainAccessTokenRequest:
      example: 14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationAzureAuthenticateRequest:
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationAzureAuthenticateRequest-properties-jwt:
      example: eyJhbGciOiJSUzI1NiIs......uTonCA
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationGcpAuthnAuthenticateRequest:
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationGcpAuthnAuthenticateRequest-properties-jwt:
      example: eyJhbGciOiJSUzI1NiIs......uTonCA
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationOidcAuthenticateRequest:
      example:
        id_token: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        id_token:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationOidcAuthenticateRequest-properties-id_token:
      example: eyJhbGciOiJSUzI1NiIs......uTonCA
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest:
      example:
        jwt: eyJhbGciOiJSUzI1NiIs......uTonCA
      properties:
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest-properties-jwt:
      example: eyJhbGciOiJSUzI1NiIs......uTonCA
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PoliciesPutPolicyDocumentRequest:
      example: |
        - !policy
          id: database
          body:
          - !host
            id: db-host
          - !variable
            id: db-password
            owner: !host db-host
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest:
      example:
        expiration: 2017-08-04T22:27:20+00:00
        host_factory: myorg:hosty_factory:hf-db
      properties:
        expiration:
          example: 2017-08-04T22:27:20+00:00
          type: string
        host_factory:
          example: myorg:hosty_factory:hf-db
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-expiration:
      example: 2017-08-04T22:27:20+00:00
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-host_factory:
      example: myorg:host_factory:hf-db
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-count:
      example: 2
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-cidr:
      example:
      - 127.0.0.1/32
      items:
        example: 127.0.0.1/32
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest:
      example:
        id: new-host
      properties:
        id:
          example: new-host
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-id:
      example: my-new-host
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-annotations:
      example:
        description: new db host
        puppet: "true"
      properties:
        description:
          example: new db host
          type: string
        puppet:
          example: "true"
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-client_ip:
      example: 127.0.0.1
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-user_agent:
      example: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36\
        \ (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-account:
      example: dev
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-username:
      example: admin
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusGetClientInfoResponse-properties-token_issued_at:
      example: 2017-08-04T22:27:20+00:00
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusCheckAuthenticatorConfigurationResponse-properties-status:
      example: error
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusCheckAuthenticatorConfigurationResponse-properties-error:
      example: "#<Errors::Authentication::AuthenticatorNotFound: CONJ00001E Authenticator\
        \ 'authn-oidc' is not implemented in Conjur>"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-installed:
      example:
      - authn
      items:
        example: authn
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-configured:
      example:
      - authn
      items:
        example: authn
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusAuthenticatorDetailsResponse-properties-enabled:
      example:
      - authn
      items:
        example: authn
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusCheckConjurHealthResponse:
      example: {}
      properties: {}
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-StatusCheckRemoteHealthResponse:
      example: {}
      properties: {}
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SecretsGetSecretValueResponse:
      example: supersecret
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SecretsGetMultipleValuesResponse:
      example:
        myorg:variable:secret1: secret1Value
        myorg:variable:secret2: secret2Value
      properties:
        myorg:variable:secret1:
          example: secret1Value
          type: string
        myorg:variable:secret2:
          example: secret2Value
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SecretsGetMultipleValues406Response:
      example: {}
      properties: {}
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PoliciesModifyPolicyResponse:
      example:
        version: 1
        created_roles:
          myorg:host:database/db-host:
            id: myorg:host:database/db-host
            api_key: 309yzpa1n5kp932waxw6d37x4hew2x8ve8w11m8xn92acfy672m929en
      properties:
        version:
          example: 1
          type: number
        created_roles:
          properties:
            myorg:host:database/db-host:
              properties:
                id:
                  example: myorg:host:database/db-host
                  type: string
                api_key:
                  example: 309yzpa1n5kp932waxw6d37x4hew2x8ve8w11m8xn92acfy672m929en
                  type: string
              type: object
          type: object
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PoliciesModifyPolicyResponse-properties-version:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-RolesGetRoleInformationResponse:
      example:
        created_at: 2020-12-31:12:34:56.789+00:00
        id: myorg:user:admin
        members: []
      properties:
        created_at:
          example: 2020-12-31:12:34:56.789+00:00
          type: string
        id:
          example: myorg:user:admin
          type: string
        members:
          items:
            type: string
          type: array
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesListResponse:
      example:
      - annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/test
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      items:
        properties:
          annotations:
            items:
              type: string
            type: array
          created_at:
            example: 2021-03-23T16:37:14.455+00:00
            type: string
          id:
            example: dev:policy:conjur/authn-ldap/test
            type: string
          owner:
            example: dev:user:admin
            type: string
          permissions:
            items:
              type: string
            type: array
          policy:
            example: dev:policy:root
            type: string
          policy_versions:
            items:
              type: string
            type: array
        type: object
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse:
      example:
        annotations: []
        created_at: 2021-03-23T16:37:14.455+00:00
        id: dev:policy:conjur/authn-ldap/testX
        owner: dev:user:admin
        permissions: []
        policy: dev:policy:root
        policy_versions: []
      properties:
        annotations:
          items:
            type: string
          type: array
        created_at:
          example: 2021-03-23T16:37:14.455+00:00
          type: string
        id:
          example: dev:policy:conjur/authn-ldap/testX
          type: string
        owner:
          example: dev:user:admin
          type: string
        permissions:
          items:
            type: string
          type: array
        policy:
          example: dev:policy:root
          type: string
        policy_versions:
          items:
            type: string
          type: array
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-created_at:
      example: 2021-03-23T16:37:14.455+00:00
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-id:
      example: dev:policy:conjur/authn-ldap/testX
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-owner:
      example: dev:user:admin
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy:
      example: dev:policy:root
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items:
      example:
        version: 15
        client_ip: 172.19.0.6
        created_at: 2021-03-23T16:37:09.250+00:00
        finished_at: 2021-03-23T16:37:09.435+00:00
        id: dev:policy:root
        policy_sha256: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
        policy_text: |
          - !variable one/password
          - !variable testSecret
        role: dev:user:admin
      properties:
        version:
          example: 15
          type: number
        client_ip:
          example: 172.19.0.6
          type: string
        created_at:
          example: 2021-03-23T16:37:09.250+00:00
          type: string
        finished_at:
          example: 2021-03-23T16:37:09.435+00:00
          type: string
        id:
          example: dev:policy:root
          type: string
        policy_sha256:
          example: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
          type: string
        policy_text:
          example: |
            - !variable one/password
            - !variable testSecret
          type: string
        role:
          example: dev:user:admin
          type: string
      type: object
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-version
    : example: 15
      type: number
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-created_at
    : example: 2021-03-23T16:37:09.250+00:00
      type: string
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-policy_text
    : example: |
        - !variable one/password
        - !variable testSecret
      type: string
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-policy_sha256
    : example: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
      type: string
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-finished_at
    : example: 2021-03-23T16:37:09.435+00:00
      type: string
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-client_ip
    : example: 172.19.0.6
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-id:
      example: dev:policy:root
      type: string
      x-do-not-generate: true
    ? konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-role
    : example: dev:user:admin
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensResponse:
      example:
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 281s2ag1g8s7gd2ezf6td3d619b52t9gaak3w8rj0p38124n384sq7x
      - expiration: 2017-08-04T22:27:20+00:00
        cidr:
        - 127.0.0.1/32
        - 127.0.0.2/32
        token: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
      items:
        properties:
          expiration:
            example: 2017-08-04T22:27:20+00:00
            type: string
          cidr:
            items:
              example: 127.0.0.1/32
              type: string
            type: array
          token:
            example: 281s2ag1g8s7gd2ezf6td3d619b52t9gaak3w8rj0p38124n384sq7x
            type: string
        type: object
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse:
      example:
        created_at: 2017-08-07T22:30:00.145+00:00
        id: myorg:host:brand-new-host
        owner: myorg:host_factory:hf-db
        permissions: []
        annotations: []
        api_key: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
      properties:
        created_at:
          example: 2017-08-07T22:30:00.145+00:00
          type: string
        id:
          example: myorg:host:brand-new-host
          type: string
        owner:
          example: myorg:host_factory:hf-db
          type: string
        permissions:
          items:
            type: string
          type: array
        annotations:
          items:
            type: string
          type: array
        api_key:
          example: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
          type: string
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-created_at:
      example: 2017-08-07T22:30:00.145+00:00
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-id:
      example: myorg:host:brand-new-host
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-owner:
      example: myorg:host_factory:hf-db
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-HostFactoryCreateHostResponse-properties-api_key:
      example: rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r
      type: string
      x-do-not-generate: true
    konfig-generated-schema-single-parameter-schema-get--authn-account-login:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
      required:
      - account
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
    konfig-generated-schema-single-parameter-schema-get--authn-ldap-service_id-account-login:
      properties:
        service_id:
          type: string
        account:
          $ref: '#/components/schemas/AccountName'
      required:
      - account
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - service_id
      - account
    konfig-generated-schema-single-parameter-schema-post--authn-azure-service_id-account-login-authenticate:
      properties:
        service_id:
          type: string
        account:
          $ref: '#/components/schemas/AccountName'
        login:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        Accept-Encoding:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-azure-service_id-account-login-authenticate-post-parameters-3-schema
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationAzureAuthenticateRequest-properties-jwt
      required:
      - account
      - login
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - service_id
      - account
      - login
      - Accept-Encoding
    konfig-generated-schema-single-parameter-schema-post--authn-gcp-account-authenticate:
      properties:
        account:
          type: string
        Accept-Encoding:
          enum:
          - base64
          type: string
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationGcpAuthnAuthenticateRequest-properties-jwt
      required:
      - account
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - Accept-Encoding
    konfig-generated-schema-single-parameter-schema-post--authn-k8s-service_id-account-login-authenticate:
      properties:
        service_id:
          type: string
        account:
          $ref: '#/components/schemas/AccountName'
        login:
          $ref: '#/paths/~1authn~1%7Baccount%7D~1%7Blogin%7D~1authenticate/post/parameters/1/schema'
        Accept-Encoding:
          default: application/json
          enum:
          - application/json
          - base64
          example: application/json
          type: string
          x-konfig-original-example: application/json
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-k8s-service_id-account-login-authenticate-post-parameters-3-schema
      required:
      - account
      - login
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - service_id
      - account
      - login
      - Accept-Encoding
    konfig-generated-schema-single-parameter-schema-post--authn-oidc-service_id-account-authenticate:
      properties:
        service_id:
          type: string
        account:
          $ref: '#/components/schemas/AccountName'
        id_token:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationOidcAuthenticateRequest-properties-id_token
      required:
      - account
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - service_id
      - account
    konfig-generated-schema-single-parameter-schema-post--authn-jwt-service_id-account-authenticate:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        service_id:
          type: string
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest-properties-jwt
      required:
      - account
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - service_id
    konfig-generated-schema-single-parameter-schema-post--authn-jwt-service_id-account-id-authenticate:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        id:
          description: Represents the user/host identity
          example: SomeUserID
          minLength: 1
          type: string
          x-konfig-original-example: SomeUserID
          x-konfig-generated-schema: konfig-generated-schema-paths--authn-jwt-service_id-account-id-authenticate-post-parameters-1-schema
        service_id:
          type: string
        jwt:
          example: eyJhbGciOiJSUzI1NiIs......uTonCA
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AuthenticationJwtAuthenticateRequest-properties-jwt
      required:
      - account
      - id
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - id
      - service_id
    konfig-generated-schema-single-parameter-schema-put--authn-account-api_key:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        role:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - role
    konfig-generated-schema-single-parameter-schema-patch--authenticator-account:
      properties:
        authenticator:
          enum:
          - authn-iam
          - authn-oidc
          - authn-ldap
          - authn-k8s
          - authn-gcp
          - authn-azure
          - authn-jwt
          type: string
        account:
          type: string
        enabled:
          type: boolean
      required:
      - account
      - authenticator
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - authenticator
      - account
    konfig-generated-schema-single-parameter-schema-patch--authenticator-service_id-account:
      properties:
        authenticator:
          $ref: '#/paths/~1%7Bauthenticator%7D~1%7Baccount%7D/patch/parameters/0/schema'
        service_id:
          type: string
        account:
          type: string
        enabled:
          type: boolean
      required:
      - account
      - authenticator
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - authenticator
      - service_id
      - account
    konfig-generated-schema-single-parameter-schema-get--whoami:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--authenticator-service_id-account-status:
      properties:
        authenticator:
          type: string
        service_id:
          type: string
        account:
          type: string
      required:
      - account
      - authenticator
      - service_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - authenticator
      - service_id
      - account
    konfig-generated-schema-single-parameter-schema-get--authn-gcp-account-status:
      properties:
        account:
          type: string
      required:
      - account
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
    konfig-generated-schema-single-parameter-schema-get--authenticators:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--health:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--remote_health-remote:
      properties:
        remote:
          type: string
      required:
      - remote
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - remote
    konfig-generated-schema-single-parameter-schema-get--info:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--secrets-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
        version:
          $ref: '#/components/schemas/ResourceVersion'
      required:
      - account
      - identifier
      - kind
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
      - version
    konfig-generated-schema-single-parameter-schema-get--secrets:
      properties:
        variable_ids:
          description: |
            Comma-delimited, URL-encoded resource identifiers.

            ##### Resources IDs encoding:

            - `myapp-01` -> `myapp-01` (unchanged)
            - `alice@devops` -> `alice%40devops`
            - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`
            - `research+development` -> `research%2Bdevelopment`
            - `sales&marketing` -> `sales%26marketing`
          example: "myorg:variable:secret1,myorg:variable:secret1"
          type: string
          x-konfig-original-example: "myorg:variable:secret1,myorg:variable:secret1"
          x-konfig-generated-schema: konfig-generated-schema-paths--secrets-get-parameters-0-schema
        Accept-Encoding:
          enum:
          - base64
          type: string
      required:
      - variable_ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - variable_ids
      - Accept-Encoding
    konfig-generated-schema-single-parameter-schema-delete--roles-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
        members:
          type: string
        member:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      - identifier
      - kind
      - member
      - members
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
      - members
      - member
    konfig-generated-schema-single-parameter-schema-get--roles-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
        all:
          type: string
        memberships:
          type: string
        members:
          type: string
        offset:
          $ref: '#/components/schemas/Offset'
        limit:
          $ref: '#/components/schemas/Limit'
        count:
          $ref: '#/components/schemas/Count'
        search:
          example: user
          minLength: 1
          type: string
          x-konfig-original-example: user
          x-konfig-generated-schema: konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-9-schema
        graph:
          example: ""
          type: string
          x-konfig-original-example: ""
          x-konfig-generated-schema: konfig-generated-schema-paths--roles-account-kind-identifier-get-parameters-10-schema
      required:
      - account
      - identifier
      - kind
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
      - all
      - memberships
      - members
      - offset
      - limit
      - count
      - search
      - graph
    konfig-generated-schema-single-parameter-schema-post--roles-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
        members:
          type: string
        member:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      - identifier
      - kind
      - member
      - members
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
      - members
      - member
    konfig-generated-schema-single-parameter-schema-get--resources:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        search:
          description: Only returns results that contain this string value
          example: password
          minLength: 1
          type: string
          x-konfig-original-example: password
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-get-parameters-2-schema
        offset:
          $ref: '#/components/schemas/Offset'
        limit:
          $ref: '#/components/schemas/Limit'
        count:
          $ref: '#/components/schemas/Count'
        role:
          $ref: '#/components/schemas/RoleType'
        acting_as:
          $ref: '#/components/schemas/RoleType'
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - search
      - offset
      - limit
      - count
      - role
      - acting_as
    konfig-generated-schema-single-parameter-schema-get--resources-account:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        search:
          $ref: '#/paths/~1resources/get/parameters/2/schema'
        offset:
          $ref: '#/components/schemas/Offset'
        limit:
          $ref: '#/components/schemas/Limit'
        count:
          $ref: '#/components/schemas/Count'
        role:
          $ref: '#/components/schemas/RoleType'
        acting_as:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - search
      - offset
      - limit
      - count
      - role
      - acting_as
    konfig-generated-schema-single-parameter-schema-get--resources-account-kind:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        search:
          $ref: '#/paths/~1resources/get/parameters/2/schema'
        offset:
          $ref: '#/components/schemas/Offset'
        limit:
          $ref: '#/components/schemas/Limit'
        count:
          $ref: '#/components/schemas/Count'
        role:
          $ref: '#/components/schemas/RoleType'
        acting_as:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      - kind
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - search
      - offset
      - limit
      - count
      - role
      - acting_as
    konfig-generated-schema-single-parameter-schema-get--resources-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
        permitted_roles:
          example: true
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-3-schema
        privilege:
          description: Denotes a type of permission allowed on a resource
          example: execute
          minLength: 1
          type: string
          x-konfig-original-example: execute
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-4-schema
        check:
          description: Checks whether a role has a privilege on a resource.
          example: true
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--resources-account-kind-identifier-get-parameters-5-schema
        role:
          $ref: '#/components/schemas/RoleType'
      required:
      - account
      - identifier
      - kind
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
      - permitted_roles
      - privilege
      - check
      - role
    konfig-generated-schema-single-parameter-schema-post--host_factory_tokens:
      properties:
        expiration:
          description: '`ISO 8601 datetime` denoting a requested expiration time.'
          example: 2017-08-04T22:27:20+00:00
          type: string
          x-konfig-original-example: 2017-08-04T22:27:20+00:00
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-expiration
        host_factory:
          description: Fully qualified host factory ID
          example: myorg:host_factory:hf-db
          type: string
          x-konfig-original-example: myorg:host_factory:hf-db
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-host_factory
        count:
          description: Number of host tokens to create
          example: 2
          type: integer
          x-konfig-original-example: 2
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-count
        cidr:
          description: Number of host tokens to create
          example:
          - 127.0.0.1/32
          items:
            type: string
          type: array
          x-konfig-original-example:
          - 127.0.0.1/32
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostIdentityTokensRequest-properties-cidr
      required:
      - expiration
      - host_factory
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-delete--host_factory_tokens-token:
      properties:
        token:
          example: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
          type: string
          x-konfig-original-example: 2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4
          x-konfig-generated-schema: konfig-generated-schema-paths--host_factory_tokens-token-delete-parameters-0-schema
      required:
      - token
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - token
    konfig-generated-schema-single-parameter-schema-post--host_factories-hosts:
      properties:
        id:
          description: Identifier of the host to be created. It will be created within
            the account of the host factory.
          example: my-new-host
          type: string
          x-konfig-original-example: my-new-host
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-id
        annotations:
          description: Annotations to apply to the new host
          example:
            description: new db host
            puppet: "true"
          type: object
          x-konfig-original-example:
            description: new db host
            puppet: "true"
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-HostFactoryCreateHostRequest-properties-annotations
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--public_keys-account-kind-identifier:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        kind:
          $ref: '#/components/schemas/Kind'
        identifier:
          $ref: '#/components/schemas/ResourceID'
      required:
      - account
      - identifier
      - kind
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - kind
      - identifier
    konfig-generated-schema-single-parameter-schema-post--ca-account-service_id-sign:
      properties:
        account:
          $ref: '#/components/schemas/AccountName'
        service_id:
          example: ca-service
          minLength: 1
          type: string
          x-konfig-original-example: ca-service
          x-konfig-generated-schema: konfig-generated-schema-paths--ca-account-service_id-sign-post-parameters-1-schema
        csr:
          type: string
        ttl:
          type: string
      required:
      - account
      - csr
      - service_id
      - ttl
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - account
      - service_id
    StatusConjurServerInfoResponse_authenticators:
      example:
        configured:
        - configured
        - configured
        installed:
        - installed
        - installed
        enabled:
        - enabled
        - enabled
      properties:
        installed:
          items:
            type: string
          type: array
        configured:
          items:
            type: string
          type: array
        enabled:
          items:
            type: string
          type: array
      type: object
    ResourcesShowResourceDetailsResponse_permissions_inner:
      properties:
        privilege:
          type: string
        role:
          type: string
        policy:
          type: string
      type: object
    ResourcesShowResourceDetailsResponse_secrets_inner:
      properties:
        version:
          type: number
        expires_at:
          type: string
      type: object
    ResourcesShowResourceDetailsResponse_policy_versions_inner:
      example:
        version: 15
        client_ip: 172.19.0.6
        created_at: 2021-03-23T16:37:09.250+00:00
        finished_at: 2021-03-23T16:37:09.435+00:00
        id: dev:policy:root
        policy_sha256: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
        policy_text: |
          - !variable one/password
          - !variable testSecret
        role: dev:user:admin
      properties:
        version:
          example: 15
          type: number
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-version
        created_at:
          example: 2021-03-23T16:37:09.250+00:00
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-created_at
        policy_text:
          example: |
            - !variable one/password
            - !variable testSecret
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-policy_text
        policy_sha256:
          example: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-policy_sha256
        finished_at:
          example: 2021-03-23T16:37:09.435+00:00
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-finished_at
        client_ip:
          example: 172.19.0.6
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-client_ip
        id:
          example: dev:policy:root
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-id
        role:
          example: dev:user:admin
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items-properties-role
      type: object
      x-konfig-original-example:
        version: 15
        client_ip: 172.19.0.6
        created_at: 2021-03-23T16:37:09.250+00:00
        finished_at: 2021-03-23T16:37:09.435+00:00
        id: dev:policy:root
        policy_sha256: 73d7b43ab17d69d163dedfaac88ec02a9c18ed8675abe4fe5643cd33470baf86
        policy_text: |
          - !variable one/password
          - !variable testSecret
        role: dev:user:admin
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-ResourcesShowResourceDetailsResponse-properties-policy_versions-items
    HostFactoryCreateHostIdentityTokensResponse_inner:
      properties:
        expiration:
          type: string
        cidr:
          items:
            type: string
          type: array
        token:
          type: string
      required:
      - cidr
      - expiration
      - token
      type: object
  securitySchemes:
    basicAuth:
      description: |
        Basic authentication with Conjur username and password (users only)
        or API key (hosts and users).
      scheme: basic
      type: http
      x-konfig-globally-required-security: false
    conjurAuth:
      description: Conjur access token in `Token token=<base64_encoded_token>` format.
      in: header
      name: Authorization
      type: apiKey
      x-konfig-globally-required-security: false
    conjurKubernetesMutualTls:
      description: |
        Conjur Kubernetes authenticator mutual TLS authentication.
        To authenticate using this method, you must provide a trusted client
        certificate
      scheme: mutual
      type: http
      x-konfig-globally-required-security: false

